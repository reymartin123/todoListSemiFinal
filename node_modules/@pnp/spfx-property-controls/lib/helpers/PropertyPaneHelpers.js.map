{"version":3,"sources":["helpers/PropertyPaneHelpers.ts"],"names":[],"mappings":"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","file":"helpers/PropertyPaneHelpers.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport { PropertyPaneSpinner } from '../common/propertyPaneSpinner';\nimport { ISpinnerProps } from 'office-ui-fabric-react/lib/Spinner';\n\nexport interface IPropertyPaneSpinner {\n  /**\n   * Spinner background color\n   */\n  bgColor?: string;\n  /**\n   * Class name\n   */\n  className?: string;\n  /**\n   * Office UI Fabric spinner properties\n   */\n  spinnerProps?: ISpinnerProps;\n}\n\nexport class PropertyPaneHelpers {\n  private static propertyPaneElm: HTMLElement = null;\n  private static spinnerElm: Element = null;\n\n  /**\n   * Add a spinner for the `loadPropertyPaneResources` method\n   */\n  public static setSpinner(props?: IPropertyPaneSpinner): void {\n    this.clearSpinner();\n    const className = `.spPropertyPaneContainer`;\n\n    this.waitForElement(className).then(propPanelElm => {\n      if (propPanelElm) {\n        this.propertyPaneElm = propPanelElm;\n        const spinnerElm = document.createElement(\"div\");\n        spinnerElm.style.height = \"100%\";\n        spinnerElm.style.backgroundColor = props && props.bgColor ? props.bgColor : \"rgba(255, 255, 255, 0.8)\";\n        spinnerElm.style.zIndex = \"99\";\n        spinnerElm.style.position = \"relative\";\n        if (props && props.className) {\n          spinnerElm.classList.add(className);\n        }\n        this.spinnerElm = propPanelElm.appendChild(spinnerElm);\n        const element: React.ReactElement<ISpinnerProps> = React.createElement(PropertyPaneSpinner, props && props.spinnerProps);\n        ReactDom.render(element, this.spinnerElm);\n      }\n    });\n  }\n\n  /**\n   * Clear the spinner from the property pane\n   */\n  public static clearSpinner(delay: number = 0): void {\n    if (delay <= 0) {\n      // Check if the property pane element exists and remove the styling\n      if (this.propertyPaneElm) {\n        this.propertyPaneElm = null;\n      }\n      if (this.spinnerElm) {\n        this.spinnerElm.remove();\n        this.spinnerElm = null;\n      }\n    } else {\n      setTimeout(() => {\n        this.clearSpinner();\n      }, delay);\n    }\n  }\n\n\n  /**\n   * Waiting until an element exists\n   *\n   * @param selector\n   */\n  private static waitForElement(selector: string): Promise<HTMLElement | null> {\n    return new Promise((resolve, reject) => {\n      const element = document.querySelector(selector) as HTMLElement;\n\n      if (element) {\n        resolve(element);\n        return;\n      }\n\n      const observer = new MutationObserver((mutations) => {\n        // Timeout\n        const timer = setTimeout(() => {\n          observer.disconnect();\n          resolve(null);\n          return;\n        }, 5000);\n\n        mutations.forEach((mutation) => {\n          const nodes = [].slice.call(mutation.addedNodes);\n          for (const node of nodes) {\n            if (node.matches && node.matches(selector)) {\n              clearTimeout(timer);\n              observer.disconnect();\n              resolve(node);\n              return;\n            }\n          }\n        });\n      });\n\n      observer.observe(document.documentElement, { childList: true, subtree: true });\n    });\n  }\n}\n"],"sourceRoot":"../../src"}