{"version":3,"sources":["propertyFields/viewPicker/IPropertyFieldViewPicker.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH,IAAY,8BAGX;AAHD,WAAY,8BAA8B;IACxC,+EAAM,CAAA;IACN,qFAAK,CAAA;AACP,CAAC,EAHW,8BAA8B,GAA9B,sCAA8B,KAA9B,sCAA8B,QAGzC","file":"propertyFields/viewPicker/IPropertyFieldViewPicker.js","sourcesContent":["import { IWebPartContext, IPropertyPaneCustomFieldProps } from '@microsoft/sp-webpart-base';\nimport { ISPView } from './ISPView';\n\n\n/**\n * Enum for specifying how the views should be sorted\n */\nexport enum PropertyFieldViewPickerOrderBy {\n  Id = 1,\n  Title\n}\n\n/**\n * Public properties of the PropertyFieldViewPicker custom field\n */\nexport interface IPropertyFieldViewPickerProps {\n  /**\n   * Context of the current web part\n   */\n  context: IWebPartContext;\n\n  /**\n   * Custom Field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\n   * Default value is 200.\n   */\n  deferredValidationTime?: number;\n\n  /**\n   * Whether the property pane field is enabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Filter views from Odata query\n   */\n  filter?: string;\n\n  /**\n   * An UNIQUE key indicates the identity of this control\n   */\n  key?: string;\n\n  /**\n   * Property field label displayed on top\n   */\n  label: string;\n  /**\n   * The List Id of the list where you want to get the views\n   */\n  listId?: string;\n\n  /**\n   * Specify the property on which you want to order the retrieve set of views.\n   */\n  orderBy?: PropertyFieldViewPickerOrderBy;\n\n  /**\n   * Parent Web Part properties\n   */\n  properties: any;\n\n  /**\n   * Initial selected view of the control\n   */\n  selectedView?: string | string[];\n\n  /**\n   * Defines view titles which should be excluded from the view picker control\n   */\n  viewsToExclude?: string[];\n\n  /**\n   * Absolute Web Url of target site (user requires permissions)\n   */\n  webAbsoluteUrl?: string;\n\n  /**\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\n   *\n   *   When it returns string:\n   *   - If valid, it returns empty string.\n   *   - If invalid, it returns the error message string and the text field will\n   *     show a red border and show an error message below the text field.\n   *\n   *   When it returns Promise<string>:\n   *   - The resolved value is display as error message.\n   *   - The rejected, the value is thrown away.\n   *\n   */\n  onGetErrorMessage?: (value: string) => string | Promise<string>;\n  /**\n   * Defines a onPropertyChange function to raise when the selected value changed.\n   * Normally this function must be always defined with the 'this.onPropertyChange'\n   * method of the web part object.\n   */\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\n  /**\n    * Callback that is called before the dropdown is populated\n    */\n  onViewsRetrieved?: (views: ISPView[]) => PromiseLike<ISPView[]> | ISPView[];\n}\n\n/**\n * Private properties of the PropertyFieldViewPicker custom field.\n * We separate public & private properties to include onRender & onDispose method waited\n * by the PropertyFieldCustom, without asking to the developer to add it when he's using\n * the PropertyFieldViewPicker.\n */\nexport interface IPropertyFieldViewPickerPropsInternal extends IPropertyFieldViewPickerProps, IPropertyPaneCustomFieldProps {\n  context: IWebPartContext;\n  deferredValidationTime?: number;\n  disabled?: boolean;\n  filter?: string;\n  key: string;\n  label: string;\n  listId?: string;\n  orderBy?: PropertyFieldViewPickerOrderBy;\n  properties: any;\n  selectedView?: string;\n  targetProperty: string;\n  viewsToExclude?: string[];\n  webAbsoluteUrl?: string;\n  onGetErrorMessage?: (value: string | string[]) => string | Promise<string>;\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\n  onViewsRetrieved?: (views: ISPView[]) => PromiseLike<ISPView[]> | ISPView[];\n}\n"],"sourceRoot":"../../../src"}