{"version":3,"sources":["propertyFields/sitePicker/PropertyFieldSitePickerHost.tsx"],"names":[],"mappings":"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","file":"propertyFields/sitePicker/PropertyFieldSitePickerHost.js","sourcesContent":["import * as React from 'react';\nimport { IPropertyFieldSitePickerHostProps, ISitePickerState } from './IPropertyFieldSitePickerHost';\nimport SPSiteSearchService from '../../services/SPSiteSearchService';\nimport FieldErrorMessage from '../errorMessage/FieldErrorMessage';\nimport * as telemetry from '../../common/telemetry';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\nimport * as strings from 'PropertyControlStrings';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';\nimport { IPropertyFieldSite } from './IPropertyFieldSitePicker';\nimport { PropertyFieldSitePickerListItem } from './PropertyFieldSitePickerListItem/PropertyFieldSitePickerListItem';\nimport styles from './PropertyFieldSitePickerHost.module.scss';\nimport { initializeIcons } from '@uifabric/icons';\nimport { Async } from '@uifabric/utilities/lib';\n\nexport default class PropertyFieldSitePickerHost extends React.Component<IPropertyFieldSitePickerHostProps, ISitePickerState> {\n  private searchService: SPSiteSearchService;\n  private async: Async;\n\n  constructor(props: IPropertyFieldSitePickerHostProps) {\n    super(props);\n    initializeIcons();\n\n    telemetry.track('PropertyFieldSitePicker', {\n      disabled: props.disabled\n    });\n\n    this.state = {\n      isLoading: false,\n      selectedSites: props.initialSites || [],\n      siteSearchResults: [],\n      errorMessage: null\n    };\n\n    this.async = new Async(this);\n\n    this.searchService = new SPSiteSearchService();\n  }\n\n  private onSearchFieldChange = async (newValue?: string): Promise<void> => {\n    if (newValue && newValue.length > 2) {\n      this.setState({ isLoading: true });\n      try {\n        const sites = await this.searchService.searchSites(this.props.context, newValue);\n        this.setState({ siteSearchResults: sites });\n      } catch (error) {\n        this.setState({ errorMessage: error });\n      } finally {\n        this.setState({ isLoading: false });\n      }\n    } else {\n      this.setState({ siteSearchResults: [] });\n    }\n  }\n\n  private handleCheckboxChange = (site: IPropertyFieldSite, checked: boolean): void => {\n    let selectedSites = [...this.state.selectedSites];\n    if (checked) {\n      if (this.props.multiSelect) {\n        selectedSites.push(site);\n      } else {\n        selectedSites = [site];\n      }\n    } else {\n      if (this.props.multiSelect) {\n        selectedSites.splice(selectedSites.indexOf(site), 1);\n      } else {\n        selectedSites = [];\n      }\n    }\n\n    this.props.onPropertyChange(this.props.targetProperty, this.state.selectedSites, selectedSites);\n    // Trigger the apply button\n    if (typeof this.props.onChange !== 'undefined' && this.props.onChange !== null) {\n      this.props.onChange(this.props.targetProperty, selectedSites);\n    }\n\n    this.setState({ selectedSites });\n  }\n\n  public render(): JSX.Element {\n    const { isLoading, siteSearchResults, selectedSites } = this.state;\n\n    return (\n      <div>\n        {this.props.label && <Label>{this.props.label}</Label>}\n        <SearchBox\n          placeholder={strings.SitePickerSearchBoxPlaceholder}\n          onChanged={this.async.debounce(this.onSearchFieldChange, this.props.deferredValidationTime)}\n        />\n        {\n          isLoading &&\n          <Spinner size={SpinnerSize.medium} />\n        }\n        {\n          !isLoading && siteSearchResults &&\n          <div>\n            {\n              siteSearchResults.length > 0 &&\n              <ul className={styles.siteList}>\n                {\n                  siteSearchResults.map((site: IPropertyFieldSite): JSX.Element =>\n                    <PropertyFieldSitePickerListItem\n                      key={site.id}\n                      checked={selectedSites.filter(s => s.id === site.id).length > 0}\n                      handleCheckboxChange={this.handleCheckboxChange}\n                      site={site}\n                    />\n                  )\n                }\n              </ul>\n            }\n            {\n              siteSearchResults.length === 0 &&\n              <Label>{strings.SitePickerNoResults}</Label>\n            }\n          </div>\n        }\n        {\n          selectedSites && selectedSites.length > 0 &&\n          <div>\n            <Label className={styles.bold}>{selectedSites.length} {strings.SitePickerSitesChosen}</Label>\n            <ul className={styles.siteList}>\n              {\n                selectedSites.map((site: IPropertyFieldSite): JSX.Element =>\n                  <PropertyFieldSitePickerListItem\n                    key={site.id}\n                    checked={selectedSites.filter(s => s.id === site.id).length > 0}\n                    handleCheckboxChange={this.handleCheckboxChange}\n                    site={site}\n                  />\n                )\n              }\n            </ul>\n          </div>\n        }\n\n        <FieldErrorMessage errorMessage={this.state.errorMessage} />\n      </div>\n    );\n  }\n}"],"sourceRoot":"../../../src"}