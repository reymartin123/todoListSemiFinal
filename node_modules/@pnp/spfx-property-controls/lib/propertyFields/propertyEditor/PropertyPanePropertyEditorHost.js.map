{"version":3,"sources":["propertyFields/propertyEditor/PropertyPanePropertyEditorHost.tsx"],"names":[],"mappings":"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","file":"propertyFields/propertyEditor/PropertyPanePropertyEditorHost.js","sourcesContent":["import * as React from 'react';\nimport { IPropertyPanePropertyEditorHostProps, IPropertyPanePropertyEditorHostState } from './IPropertyPanePropertyEditorHost';\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';\nimport { PrimaryButton, DefaultButton, IButtonProps, IconButton } from 'office-ui-fabric-react/lib/Button';\nimport AceEditor from 'react-ace';\nimport { set } from '@microsoft/sp-lodash-subset';\nimport * as telemetry from '../../common/telemetry';\nimport styles from './PropertyPanePropertyEditorHost.module.scss';\nimport * as strings from 'PropertyControlStrings';\n\n\nexport default class PropertyPanePropertyEditorHost extends React.Component<IPropertyPanePropertyEditorHostProps, IPropertyPanePropertyEditorHostState> {\n\n    private previousValue: string;\n    private cancel: boolean = true;\n    private fileRef: HTMLInputElement = null;\n\n    constructor(props: IPropertyPanePropertyEditorHostProps, state: IPropertyPanePropertyEditorHostState) {\n        super(props);\n\n        telemetry.track('PropertyWebPartInformation', {});\n\n        this.state = {\n            propertiesJson: this.getProperties(),\n            errorMessage: undefined,\n        };\n    }\n\n    private setFileRef = (element: HTMLInputElement) => {\n        this.fileRef = element;\n    }\n\n    private getProperties = (): string => {\n        let props = {};\n        props = this.props.webpart.properties;\n        return JSON.stringify(props);\n    }\n\n    /**\n     * Called when the save button  gets clicked\n     */\n    private onSave = (): void => {\n        const newProperties = JSON.parse(this.state.propertiesJson);\n        for (let propName in newProperties) {\n            // Do not update dynamic data properties\n            if(!(this.props.webpart.properties[propName] && this.props.webpart.properties[propName].__type === \"DynamicProperty\")) {\n                set(this.props.webpart.properties, propName, newProperties[propName]);\n                if (typeof this.props.webpart.properties[propName].onChange !== 'undefined' && this.props.webpart.properties[propName].onChange !== null) {\n                    this.props.webpart.properties[propName].onChange(propName, newProperties[propName]);\n                }\n            }\n        }\n        this.props.webpart.render();\n        this.props.webpart.context.propertyPane.refresh();\n        this.setState((current) => ({ ...current, openPanel: false }));\n    }\n\n    /**\n     * Called when the properties editor changes\n     */\n    private onChange = (newValue: string, event?: any): void => {\n        this.setState((current) => ({ ...current, propertiesJson: newValue }));\n    }\n\n    /**\n     * Called to open the editor panel\n     */\n    private onOpenPanel = (): void => {\n\n        // Store the current code value\n        this.previousValue = JSON.stringify(this.props.webpart.properties, null, '\\t');\n        this.setState((current) => ({ ...current, propertiesJson: this.previousValue }));\n        this.cancel = true;\n\n        this.setState({\n            openPanel: true,\n        });\n    }\n\n    /**\n    * Close the panel\n    */\n    private onClosePanel = (): void => {\n        this.setState((crntState: IPropertyPanePropertyEditorHostState) => {\n            const newState: IPropertyPanePropertyEditorHostState = {\n                openPanel: false,\n            };\n\n            // Check if the property has to be reset\n            if (this.cancel) {\n                newState.propertiesJson = this.previousValue;\n            }\n\n            return newState;\n        });\n    }\n\n    /**\n     * Called when clicking 'Download'\n     */\n    private onDownload = (): void => {\n\n        const a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.setAttribute(\"style\", \"display: none\");\n        a.setAttribute(\"data-interception\", \"off\");\n        const json = JSON.stringify(JSON.parse(this.state.propertiesJson), null, '\\t'); // remove indentation\n        const blob = new Blob([json], { type: \"octet/stream\" });\n        const url = window.URL.createObjectURL(blob);\n        a.href = url;\n        a.download = \"webpartproperties.json\";\n        a.click();\n        window.URL.revokeObjectURL(url);\n    }\n\n    /**\n     * Called when the changed event occurs on the file upload control\n     */\n    private onUpload = (): void => {\n        if (this.fileRef.files.length > 0 && this.fileRef.files[0].type === \"application/json\") {\n            let fileReader: FileReader = new FileReader();\n            fileReader.readAsText(this.fileRef.files[0]);\n            fileReader.onload = () => {\n                let jsonString = fileReader.result as string;\n                let json = JSON.parse(jsonString); // normalize as an object\n                jsonString = JSON.stringify(json, null, '\\t'); // and format as an indented string again\n                this.setState((current) => ({ ...current, propertiesJson: jsonString }));\n            };\n        } else {\n            alert(strings.JsonFileRequiredMessage);\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div>\n                <DefaultButton onClick={this.onOpenPanel}>Edit Properties</DefaultButton>\n                <Panel\n                    isOpen={this.state.openPanel}\n                    hasCloseButton={true}\n                    onDismiss={this.onClosePanel}\n                    isLightDismiss={true}\n                    type={PanelType.medium}\n                    headerText=\"Edit Raw Properties\"\n                    onRenderFooterContent={() => (\n                        <div className={styles.actions}>\n                            <div className=\"ms-Grid\" dir=\"ltr\">\n                                <div className=\"ms-Grid-row\">\n                                    <div className=\"ms-Grid-col ms-sm6 ms-md6 ms-lg6 ms-textAlignLeft\">\n                                        <PrimaryButton iconProps={{ iconName: 'Accept' }} text={strings.ApplyButtonLabel} value={strings.ApplyButtonLabel} onClick={this.onSave} />\n\n                                        <DefaultButton iconProps={{ iconName: 'Cancel' }} text={strings.CancelButtonLabel} value={strings.CancelButtonLabel} onClick={this.onClosePanel} />\n                                    </div>\n                                    <div className=\"ms-Grid-col ms-sm6 ms-md6 ms-lg6 ms-textAlignRight\">\n                                        <DefaultButton color=\"ms-bgColor-themeLight\" iconProps={{ iconName: 'Download' }} text={strings.ExportButtonLabel} value={strings.ExportButtonLabel} onClick={this.onDownload} />\n\n                                        <input type=\"file\" id=\"uploadwebpartjson\" ref={this.setFileRef} style={{ display: \"none\" }} onChange={this.onUpload} />\n\n                                        <DefaultButton iconProps={{ iconName: 'Upload' }} text={strings.ImportButtonLabel} value={strings.ImportButtonLabel} onClick={() => { this.fileRef.click(); }} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}>\n\n                    <AceEditor\n                        mode='ace/mode/json'\n                        theme=\"monokai\"\n                        onChange={this.onChange}\n                        value={this.state.propertiesJson}\n                        name={`code-property-editor`}\n                        editorProps={{ $blockScrolling: true }}\n                    />\n                </Panel>\n            </div>\n        );\n    }\n}\n"],"sourceRoot":"../../../src"}