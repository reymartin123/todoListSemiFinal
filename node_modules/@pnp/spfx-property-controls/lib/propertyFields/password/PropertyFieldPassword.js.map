{"version":3,"sources":["propertyFields/password/PropertyFieldPassword.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA+B;AAC/B,oCAAsC;AACtC,8DAGoC;AAGpC,yEAAoE;AAEpE;IAQE,sCAAmB,eAAuB,EAAE,WAAgD;QANrF,SAAI,GAA0B,uCAAqB,CAAC,MAAM,CAAC;QAOhE,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;QAE9B,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAEO,8CAAO,GAAf,UAAgB,IAAiB,EAAE,OAAa,EAAE,cAAkE;QAElH,IAAM,KAAK,GAA6D,IAAI,CAAC,UAAU,CAAC;QAExF,IAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,mCAAyB,eACxD,KAAK,IACR,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IACrC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE/B,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,iBAAiB,GAAG,cAAc,CAAC;QAC1C,CAAC;IACH,CAAC;IAEO,+CAAQ,GAAhB,UAAiB,IAAiB;QAChC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAEO,iDAAU,GAAlB,UAAmB,KAAa;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IAEH,mCAAC;AAAD,CA1CA,AA0CC,IAAA;AAED,+BAAsC,cAAsB,EAAE,UAAuC;IACnG,MAAM,CAAC,IAAI,4BAA4B,CAAC,cAAc,eACjD,UAAU,IACb,SAAS,EAAE,UAAU,CAAC,SAAS,EAC/B,QAAQ,EAAE,IAAI,EACd,SAAS,EAAE,IAAI,IACf,CAAC;AACL,CAAC;AAPD,sDAOC","file":"propertyFields/password/PropertyFieldPassword.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  IPropertyPaneField,\n  PropertyPaneFieldType,\n} from '@microsoft/sp-webpart-base';\n\nimport { IPropertyFieldPasswordProps, IPropertyFieldPasswordPropsInternal } from './IPropertyFieldPassword';\nimport PropertyFieldPasswordHost from './PropertyFieldPasswordHost';\n\nclass PropertyFieldPasswordBuilder implements IPropertyPaneField<IPropertyFieldPasswordPropsInternal> {\n  public targetProperty: string;\n  public type: PropertyPaneFieldType = PropertyPaneFieldType.Custom;\n  public properties: IPropertyFieldPasswordPropsInternal;\n\n\n  private _onChangeCallback: (targetProperty?: string, newValue?: any) => void;\n\n  public constructor(_targetProperty: string, _properties: IPropertyFieldPasswordPropsInternal) {\n    this.targetProperty = _targetProperty;\n    this.properties = _properties;\n\n    this.properties.onRender = this._render.bind(this);\n    this.properties.onDispose = this._dispose.bind(this);\n  }\n\n  private _render(elem: HTMLElement, context?: any, changeCallback?: (targetProperty?: string, newValue?: any) => void): void {\n\n    const props: IPropertyFieldPasswordProps = <IPropertyFieldPasswordProps>this.properties;\n\n    const element = React.createElement(PropertyFieldPasswordHost, {\n      ...props,\n      onChanged: this._onChanged.bind(this)\n    });\n\n    ReactDOM.render(element, elem);\n\n    if (changeCallback) {\n      this._onChangeCallback = changeCallback;\n    }\n  }\n\n  private _dispose(elem: HTMLElement) {\n    ReactDOM.unmountComponentAtNode(elem);\n  }\n\n  private _onChanged(value: string): void {\n    if (this._onChangeCallback) {\n      this._onChangeCallback(this.targetProperty, value);\n    }\n  }\n\n}\n\nexport function PropertyFieldPassword(targetProperty: string, properties: IPropertyFieldPasswordProps): IPropertyPaneField<IPropertyFieldPasswordPropsInternal> {\n  return new PropertyFieldPasswordBuilder(targetProperty, {\n    ...properties,\n    onChanged: properties.onChanged,\n    onRender: null,\n    onDispose: null\n  });\n}\n"],"sourceRoot":"../../../src"}