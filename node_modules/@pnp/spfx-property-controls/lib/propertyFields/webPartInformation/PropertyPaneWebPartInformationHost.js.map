{"version":3,"sources":["propertyFields/webPartInformation/PropertyPaneWebPartInformationHost.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gDAAkD;AAGlD,kDAAoD;AAEpD;IAAgE,sDAAyD;IAEvH,4CAAY,KAA+C;QAA3D,YACE,kBAAM,KAAK,CAAC,SAGb;QADC,SAAS,CAAC,KAAK,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC;;IACpD,CAAC;IAEM,mDAAM,GAAb;QACE,IAAI,SAAS,GAAgB,IAAI,CAAC;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9E,IAAI,cAAc,GAAG,EAAE,CAAC;YACxB,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC;YAE7D,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtC,cAAc,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC;YAC/D,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;gBACrC,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC;YAC7D,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CACvD,CAAC;gBACC,cAAc,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC5D,CAAC;YAED,SAAS,GAAG,2CAAY,cAAc,EAAW,CAAC;QACpD,CAAC;QAED,MAAM,CAAC,CACL;YACE,6BAAK,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAQ;YAGtE,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,CACzB;gBAAK,2BAAG,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAG,OAAO,CAAC,aAAa,CAAK,CAAM,CAChH;YAGF,SAAS,CACN,CACP,CAAC;IACJ,CAAC;IACH,yCAAC;AAAD,CA5CA,AA4CC,CA5C+D,KAAK,CAAC,SAAS,GA4C9E","file":"propertyFields/webPartInformation/PropertyPaneWebPartInformationHost.js","sourcesContent":["import * as React from 'react';\nimport * as strings from 'PropertyControlStrings';\nimport { IPropertyPaneWebPartInformationHostProps } from './IPropertyPaneWebPartInformationHost';\nimport PropertyFieldHeader from '../../common/propertyFieldHeader/PropertyFieldHeader';\nimport * as telemetry from '../../common/telemetry';\n\nexport default class PropertyPaneWebPartInformationHost extends React.Component<IPropertyPaneWebPartInformationHostProps> {\n\n  constructor(props: IPropertyPaneWebPartInformationHostProps) {\n    super(props);\n\n    telemetry.track('PropertyWebPartInformation', {});\n  }\n\n  public render(): JSX.Element {\n    let iframeElm: JSX.Element = null;\n    if (this.props.videoProperties && this.props.videoProperties.embedLink !== \"\") {\n      let linkProperties = {};\n      linkProperties[\"src\"] = this.props.videoProperties.embedLink;\n\n      if (this.props.videoProperties.height) {\n        linkProperties[\"height\"] = this.props.videoProperties.height;\n      }\n\n      if (this.props.videoProperties.width) {\n        linkProperties[\"width\"] = this.props.videoProperties.width;\n      }\n\n      for (let prop in this.props.videoProperties.properties)\n      {\n        linkProperties[\"prop\"] = this.props.videoProperties[prop];\n      }\n\n      iframeElm = <iframe {...linkProperties}></iframe>;\n    }\n\n    return (\n      <div>\n        <div dangerouslySetInnerHTML={{ __html: this.props.description }}></div>\n\n        {\n          this.props.moreInfoLink && (\n            <div><a href={this.props.moreInfoLink} target={this.props.moreInfoLinkTarget}>{strings.MoreInfoLabel}</a></div>\n          )\n        }\n\n        {iframeElm}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}