{"version":3,"sources":["propertyFields/dropdownWithCallout/PropertyFieldDropdownWithCalloutHost.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,4FAAuF;AAGvF,kDAAoD;AACpD,2EAA2G;AAE3G,uHAA4H;AAE5H,IAAM,IAAI,GAAQ,OAAO,CAAC,aAAa,CAAC,CAAC;AAEzC;IAAuD,6CAAiE;IACpH,mCAAY,KAAiD;QAA7D,YACE,kBAAM,KAAK,CAAC,SAKb;QAHC,SAAS,CAAC,KAAK,CAAC,uBAAuB,EAAE;YACvC,QAAQ,EAAE,KAAK,CAAC,QAAQ;SACzB,CAAC,CAAC;;IACL,CAAC;IAEM,0CAAM,GAAb;QACE,IAAM,aAAa,GAAmB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAClE,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC,wCAAwC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC3F,MAAM,CAAC,CACH;YACI,oBAAC,6BAAmB,eAAK,IAAI,CAAC,KAAK,EAAI;YACvC,oBAAC,mBAAQ,eAAK,aAAa,EAAI,CAC7B,CACT,CAAC;IACN,CAAC;IAEO,4EAAwC,GAAhD,UAAiD,eAA8C;QAC7F,MAAM,CAAC,eAAe,CAAC,GAAG,CAAkB,UAAA,cAAc;YACxD,MAAM,CAAC;gBACL,GAAG,EAAE,cAAc,CAAC,GAAG;gBACvB,IAAI,EAAE,cAAc,CAAC,IAAI;gBACzB,KAAK,EAAE,cAAc,CAAC,KAAK;gBAC3B,QAAQ,EAAE,qDAA4B,CAAC,qDAA4B,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC1F,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IACL,gCAAC;AAAD,CA9BA,AA8BC,CA9BsD,KAAK,CAAC,SAAS,GA8BrE","file":"propertyFields/dropdownWithCallout/PropertyFieldDropdownWithCalloutHost.js","sourcesContent":["import * as React from 'react';\nimport PropertyFieldHeader from '../../common/propertyFieldHeader/PropertyFieldHeader';\n\nimport { IPropertyFieldDropdownWithCalloutHostProps } from './IPropertyFieldDropdownWithCalloutHost';\nimport * as telemetry from '../../common/telemetry';\nimport { Dropdown, IDropdownProps, IDropdownOption } from 'office-ui-fabric-react/lib/components/Dropdown';\nimport { IPropertyPaneDropdownOption } from '@microsoft/sp-webpart-base';\nimport { SelectableOptionMenuItemType } from 'office-ui-fabric-react/lib/utilities/selectableOption/SelectableOption.types';\n\nconst omit: any = require('lodash.omit');\n\nexport default class PropertyFieldDropdownHost extends React.Component<IPropertyFieldDropdownWithCalloutHostProps, null> {\n    constructor(props: IPropertyFieldDropdownWithCalloutHostProps) {\n      super(props);\n\n      telemetry.track('PropertyFieldDropdown', {\n        disabled: props.disabled\n      });\n    }\n\n    public render(): JSX.Element {\n      const dropdownProps: IDropdownProps = omit(this.props, ['label']);\n      dropdownProps.options = this._convertPropPaneOptionsToDropdownOptions(dropdownProps.options);\n        return (\n            <div>\n                <PropertyFieldHeader {...this.props} />\n                <Dropdown {...dropdownProps} />\n            </div>\n        );\n    }\n\n    private _convertPropPaneOptionsToDropdownOptions(propPaneOptions: IPropertyPaneDropdownOption[]): IDropdownOption[] {\n      return propPaneOptions.map<IDropdownOption>(propPaneOption => {\n        return {\n          key: propPaneOption.key,\n          text: propPaneOption.text,\n          index: propPaneOption.index,\n          itemType: SelectableOptionMenuItemType[SelectableOptionMenuItemType[propPaneOption.type]]\n        };\n      });\n    }\n}\n"],"sourceRoot":"../../../src"}