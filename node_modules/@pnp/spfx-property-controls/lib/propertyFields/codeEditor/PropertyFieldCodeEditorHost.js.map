{"version":3,"sources":["propertyFields/codeEditor/PropertyFieldCodeEditorHost.tsx"],"names":[],"mappings":"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","file":"propertyFields/codeEditor/PropertyFieldCodeEditorHost.js","sourcesContent":["import * as React from 'react';\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\nimport { PrimaryButton, DefaultButton, IButtonProps, IconButton } from 'office-ui-fabric-react/lib/Button';\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';\nimport { IPropertyFieldCodeEditorPropsInternal, PropertyFieldCodeEditorLanguages } from './IPropertyFieldCodeEditor';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { IPropertyFieldCodeEditorHostProps, IPropertyFieldCodeEditorHostState } from './IPropertyFieldCodeEditorHost';\nimport { CodeFormatter } from './CodeFormatter';\nimport styles from './PropertyFieldCodeEditorHost.module.scss';\nimport FieldErrorMessage from '../errorMessage/FieldErrorMessage';\nimport * as telemetry from '../../common/telemetry';\nimport * as strings from 'PropertyControlStrings';\nimport * as brace from 'brace';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/json';\nimport 'brace/mode/javascript';\nimport 'brace/mode/sass';\nimport 'brace/mode/typescript';\nimport 'brace/mode/html';\nimport 'brace/mode/handlebars';\nimport 'brace/mode/xml';\nimport 'brace/theme/monokai';\n\n/**\n * Renders the controls for PropertyFieldCodeEditor component\n */\nexport default class PropertyFieldCodeEditorHost extends React.Component<IPropertyFieldCodeEditorHostProps, IPropertyFieldCodeEditorHostState> {\n  private async: Async;\n  private previousValue: string;\n  private cancel = true;\n\n  /**\n   * Constructor method\n   */\n  constructor(props: IPropertyFieldCodeEditorHostProps) {\n    super(props);\n\n    telemetry.track('PropertyFieldCodeEditor', {\n      language: props.language,\n      disabled: props.disabled\n    });\n\n    this.state = {\n      code: typeof this.props.initialValue !== 'undefined' ? this.props.initialValue : '',\n      loaded: false,\n      openPanel: false,\n      errorMessage: ''\n    };\n\n    this.onOpenPanel = this.onOpenPanel.bind(this);\n    this.onClosePanel = this.onClosePanel.bind(this);\n    this.onFormatCode = this.onFormatCode.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onSave = this.onSave.bind(this);\n    this.async = new Async(this);\n  }\n\n  /**\n   * componentWillUpdate lifecycle hook\n   *\n   * @param nextProps\n   * @param nextState\n   */\n  public componentWillUpdate(nextProps: IPropertyFieldCodeEditorHostProps, nextState: IPropertyFieldCodeEditorHostState): void {\n    if (nextProps.initialValue !== this.props.initialValue) {\n      this.setState({\n        code: typeof nextProps.initialValue !== 'undefined' ? nextProps.initialValue : ''\n      });\n    }\n  }\n\n  /**\n   * Open the right Panel\n   */\n  private onOpenPanel(): void {\n    if (this.props.disabled) {\n      return;\n    }\n\n    // Store the current code value\n    this.previousValue = this.state.code;\n    this.cancel = true;\n\n    this.setState({\n      openPanel: true,\n      loaded: false\n    });\n  }\n\n  /**\n   * Close the panel\n   */\n  private onClosePanel(): void {\n    this.setState((crntState: IPropertyFieldCodeEditorHostState) => {\n      const newState: IPropertyFieldCodeEditorHostState = {\n        openPanel: false,\n        loaded: false\n      };\n\n      // Check if the property has to be reset\n      if (this.cancel) {\n        newState.code = this.previousValue;\n      }\n\n      return newState;\n    });\n  }\n\n  /**\n   * Format the code\n   */\n  private onFormatCode(): void {\n    let formattedCode: any;\n    let codeFormatter: CodeFormatter = new CodeFormatter();\n\n    switch (this.props.language) {\n      case PropertyFieldCodeEditorLanguages.JSON: {\n        formattedCode = codeFormatter.formatJSON(this.state.code.trim());\n        break;\n      }\n      case PropertyFieldCodeEditorLanguages.XML:\n      case PropertyFieldCodeEditorLanguages.HTML: {\n        formattedCode = codeFormatter.formatHTML(this.state.code.trim());\n        break;\n      }\n      case PropertyFieldCodeEditorLanguages.Sass:\n      case PropertyFieldCodeEditorLanguages.css: {\n        formattedCode = codeFormatter.formatCSS(this.state.code.trim());\n        break;\n      }\n      case PropertyFieldCodeEditorLanguages.JavaScript:\n      case PropertyFieldCodeEditorLanguages.TypeScript:\n      case PropertyFieldCodeEditorLanguages.Handlebars: {\n        formattedCode = codeFormatter.formatScript(this.state.code.trim());\n        break;\n      }\n    }\n\n    // const beautify = require('beautify');\n    // let formattedCode: any = beautify(this.state.code.trim(), { format: codeLanguage });\n\n    this.setState({ code: formattedCode });\n  }\n\n  /**\n   * Called when the component will unmount\n   */\n  public componentWillUnmount() {\n    if (typeof this.async !== 'undefined') {\n      this.async.dispose();\n    }\n  }\n\n  /**\n   * Called when the save button  gets clicked\n   */\n  public onSave(): void {\n    this.cancel = false;\n    this.props.properties[this.props.targetProperty] = this.state.code;\n    this.props.onPropertyChange(this.props.targetProperty, this.props.initialValue, this.state.code);\n    // Trigger the apply button\n    if (typeof this.props.onChange !== 'undefined' && this.props.onChange !== null) {\n      this.props.onChange(this.props.targetProperty, this.state.code);\n    }\n    this.setState((current) => ({ ...current, openPanel: false }));\n  }\n\n  /**\n   * Called when the code gets changed\n   */\n  public onChange(newValue: string, event?: any): void {\n    this.setState((current) => ({ ...current, code: newValue }));\n  }\n\n  /**\n   * Renders the SPListpicker controls with Office UI  Fabric\n   */\n  public render(): JSX.Element {\n    return (\n      <div>\n        {this.props.label && <Label>{this.props.label}</Label>}\n        <table className={styles.codeFieldTable}>\n          <tbody>\n            <tr>\n              <td>\n                <TextField\n                  disabled={this.props.disabled}\n                  onChanged={null}\n                  readOnly={true}\n                  value={this.state.code}\n                  onClick={this.onOpenPanel}\n                />\n              </td>\n              <td className={styles.codeFieldRow}>\n                <IconButton disabled={this.props.disabled} iconProps={{ iconName: 'Code' }} onClick={this.onOpenPanel} />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <FieldErrorMessage errorMessage={this.state.errorMessage} />\n\n        <Panel\n          isOpen={this.state.openPanel}\n          hasCloseButton={true}\n          onDismiss={this.onClosePanel}\n          isLightDismiss={true}\n          type={PanelType.medium}\n          headerText={this.props.panelTitle}\n          onRenderFooterContent={() => (\n            <div className={styles.actions}>\n              <div className=\"ms-Grid\" dir=\"ltr\">\n                <div className=\"ms-Grid-row\">\n                  <PrimaryButton iconProps={{ iconName: 'Save' }} text={strings.SaveButtonLabel} value={strings.SaveButtonLabel} onClick={this.onSave} />\n\n                  <DefaultButton iconProps={{ iconName: 'Cancel' }} text={strings.CancelButtonLabel} value={strings.CancelButtonLabel} onClick={this.onClosePanel} />\n\n                  {\n                    this.props.language !== PropertyFieldCodeEditorLanguages[\"Plain Text\"] &&\n                    <DefaultButton color=\"ms-bgColor-themeLight\" iconProps={{ iconName: 'ClearFormatting' }} text={strings.FormatCodeButtonLabel} value={strings.ExportButtonLabel} onClick={this.onFormatCode} />\n                  }\n                </div>\n              </div>\n            </div>\n          )}>\n\n          <AceEditor\n            mode={this.props.language}\n            theme=\"monokai\"\n            onChange={this.onChange}\n            value={this.state.code}\n            name={`code-${this.props.targetProperty}`}\n            editorProps={{ $blockScrolling: true }}\n          />\n        </Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}