{"version":3,"sources":["propertyFields/codeEditor/CSSFormatter.ts"],"names":[],"mappings":"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","file":"propertyFields/codeEditor/CSSFormatter.js","sourcesContent":["/**\n * Helper class to format the CSS code.\n * Based on code initially developed by: http://jsbeautifier.org/\n * \n * Usage:\n        css_beautify(source_text);\n        css_beautify(source_text, options);\n\n    The options are (default in brackets):\n        indent_size (4)                   - indentation size,\n        indent_char (space)               - character to indent with,\n        selector_separator_newline (true) - separate selectors with newline or\n                                            not (e.g. \"a,\\nbr\" or \"a, br\")\n        end_with_newline (false)          - end with a newline\n\n    e.g:\n    css_beautify(css_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t',\n      'selector_separator': ' ',\n      'end_with_newline': false,\n    });\n */\nexport class CSSFormatter {\n    private ch: any;\n    private pos: number = -1;\n    private source_text: string;\n    private whiteRe: RegExp = /^\\s+$/; // tokenizer\n\n    // printer\n    private indentSize: any;\n    private indentString: string;\n    private singleIndent: string;\n    private indentLevel = 0;\n    private nestedLevel = 0;\n\n    private output: string[] = [];\n    private print: string[] = [];\n\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n    private cssBeautifyNestedAtRule = {\n        \"@page\": true,\n        \"@font-face\": true,\n        \"@keyframes\": true,\n        // also in cssBeautifyConditionalGroupRule below\n        \"@media\": true,\n        \"@supports\": true,\n        \"@document\": true\n    };\n\n    private cssBeautifyConditionalGroupRule = {\n        \"@media\": true,\n        \"@supports\": true,\n        \"@document\": true\n    };\n\n    private next(): string {\n        this.ch = this.source_text.charAt(++this.pos);\n        return this.ch;\n    }\n\n    private peek(): string {\n        return this.source_text.charAt(this.pos + 1);\n    }\n\n    private eatString(endChar: string): string {\n        let start: number = this.pos;\n\n        while (this.next()) {\n            if (this.ch === \"\\\\\") {\n                this.next();\n                this.next();\n            }\n            else if (this.ch === endChar) {\n                break;\n            }\n            else if (this.ch === \"\\n\") {\n                break;\n            }\n        }\n\n        return this.source_text.substring(start, this.pos + 1);\n    }\n\n    private eatWhitespace(): boolean {\n        let start = this.pos;\n\n        while (this.whiteRe.test(this.peek())) {\n            this.pos++;\n        }\n\n        return this.pos !== start;\n    }\n\n    private skipWhitespace(): boolean {\n        let start = this.pos;\n\n        do {\n        } while (this.whiteRe.test(this.next()));\n\n        return this.pos !== start + 1;\n    }\n\n    private eatComment(singleLine): string {\n        let start = this.pos;\n        this.next();\n\n        while (this.next()) {\n            if (this.ch === \"*\" && this.peek() === \"/\") {\n                this.pos++;\n                break;\n            }\n            else if (singleLine && this.ch === \"\\n\") {\n                break;\n            }\n        }\n\n        return this.source_text.substring(start, this.pos + 1);\n    }\n\n    private lookBack(str): boolean {\n        return this.source_text.substring(this.pos - str.length, this.pos).toLowerCase() === str;\n    }\n\n    private isCommentOnLine(): boolean {\n        let endOfLine = this.source_text.indexOf('\\n', this.pos);\n        if (endOfLine === -1) {\n            return false;\n        }\n\n        let restOfLine = this.source_text.substring(this.pos, endOfLine);\n        return restOfLine.indexOf('//') !== -1;\n    }\n\n    private indent(): void {\n        this.indentLevel++;\n        this.indentString += this.singleIndent;\n    }\n\n    private outdent(): void {\n        this.indentLevel--;\n        this.indentString = this.indentString.slice(0, -this.indentSize);\n    }\n\n    private lastCharWhitespace(): boolean {\n        return this.whiteRe.test(this.output[this.output.length - 1]);\n    }\n\n    private newLine(keepWhitespace): void {\n        if (!keepWhitespace) {\n            while (this.lastCharWhitespace()) {\n                this.output.pop();\n            }\n        }\n\n        if (this.output.length) {\n            this.output.push('\\n');\n        }\n\n        if (this.indentString) {\n            this.output.push(this.indentString);\n        }\n    }\n\n    private singleSpace(): void {\n        if (this.output.length && !this.lastCharWhitespace()) {\n            this.output.push(' ');\n        }\n    }\n\n    public css_beautify(sourceText: string, options: any): string {\n        options = options || {};\n        this.source_text = sourceText;\n\n        let indentSize: any = options.indent_size || 4;\n        let indentCharacter: any = options.indent_char || ' ';\n        let selectorSeparatorNewline: any = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;\n        let endWithNewline: any = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n\n        // compatibility\n        if (typeof indentSize === \"string\") {\n            indentSize = parseInt(indentSize, 10);\n        }\n\n        this.indentString = sourceText.match(/^[\\r\\n]*[\\t ]*/)[0];\n        this.singleIndent = new Array(indentSize + 1).join(indentCharacter);\n\n        this.print[\"{\"] = (chOpenBrace: string): void => {\n            this.singleSpace();\n            this.output.push(chOpenBrace);\n            this.newLine(false);\n        };\n\n        this.print[\"}\"] = (chCloseBrace: string): void => {\n            this.newLine(false);\n            this.output.push(chCloseBrace);\n            this.newLine(false);\n        };\n\n        if (this.indentString) {\n            this.output.push(this.indentString);\n        }\n\n        let insideRule = false;\n        let enteringConditionalGroup = false;\n\n        while (true) {\n            let isAfterSpace = this.skipWhitespace();\n\n            if (!this.ch) {\n                break;\n            }\n            else if (this.ch === '/' && this.peek() === '*') {\n                /* css comment */\n                this.newLine(false);\n                this.output.push(this.eatComment(true), \"\\n\", this.indentString);\n                let header = this.lookBack(\"\");\n\n                if (header) {\n                    this.newLine(false);\n                }\n            }\n            else if (this.ch === '/' && this.peek() === '/') {\n                // single line comment\n                this.output.push(this.eatComment(true), this.indentString);\n            }\n            else if (this.ch === '@') {\n                // strip trailing space, if present, for hash property checks\n                let atRule = this.eatString(\" \").replace(/ $/, '');\n\n                // pass along the space we found as a separate item\n                this.output.push(atRule, this.ch);\n\n                // might be a nesting at-rule\n                if (atRule in this.cssBeautifyNestedAtRule) {\n                    this.nestedLevel += 1;\n                    if (atRule in this.cssBeautifyConditionalGroupRule) {\n                        enteringConditionalGroup = true;\n                    }\n                }\n            }\n            else if (this.ch === '{') {\n                this.eatWhitespace();\n\n                if (this.peek() === '}') {\n                    this.next();\n                    this.output.push(\" {}\");\n                }\n                else {\n                    this.indent();\n                    this.print[\"{\"](this.ch);\n\n                    // when entering conditional groups, only rulesets are allowed\n                    if (enteringConditionalGroup) {\n                        enteringConditionalGroup = false;\n                        insideRule = (this.indentLevel > this.nestedLevel);\n                    } \n                    else {\n                        // otherwise, declarations are also allowed\n                        insideRule = (this.indentLevel >= this.nestedLevel);\n                    }\n                }\n            }\n            else if (this.ch === '}') {\n                this.outdent();\n                this.print[\"}\"](this.ch);\n                insideRule = false;\n\n                if (this.nestedLevel) {\n                    this.nestedLevel--;\n                }\n            }\n            else if (this.ch === \":\") {\n                this.eatWhitespace();\n\n                if (insideRule || enteringConditionalGroup) {\n                    // 'property: value' delimiter\n                    // which could be in a conditional group query\n                    this.output.push(this.ch, \" \");\n                }\n                else {\n                    if (this.peek() === \":\") {\n                        // pseudo-element\n                        this.next();\n                        this.output.push(\"::\");\n                    } \n                    else {\n                        // pseudo-class\n                        this.output.push(this.ch);\n                    }\n                }\n            }\n            else if (this.ch === '\"' || this.ch === '\\'') {\n                this.output.push(this.eatString(this.ch));\n            }\n            else if (this.ch === ';') {\n                if (this.isCommentOnLine()) {\n                    let beforeComment = this.eatString('/');\n                    let comment = this.eatComment(true);\n                    this.output.push(beforeComment, comment.substring(1, comment.length - 1), '\\n', this.indentString);\n                }\n                else {\n                    this.output.push(this.ch, '\\n', this.indentString);\n                }\n            }\n            else if (this.ch === '(') {\n                // may be a url\n                if (this.lookBack(\"url\")) {\n                    this.output.push(this.ch);\n                    this.eatWhitespace();\n\n                    if (this.next()) {\n                        if (this.ch !== ')' && this.ch !== '\"' && this.ch !== '\\'') {\n                            this.output.push(this.eatString(')'));\n                        }\n                        else {\n                            this.pos--;\n                        }\n                    }\n                }\n                else {\n                    if (isAfterSpace) {\n                        this.singleSpace();\n                    }\n\n                    this.output.push(this.ch);\n                    this.eatWhitespace();\n                }\n            }\n            else if (this.ch === ')') {\n                this.output.push(this.ch);\n            }\n            else if (this.ch === ',') {\n                this.eatWhitespace();\n                this.output.push(this.ch);\n\n                if (!insideRule && selectorSeparatorNewline) {\n                    this.newLine(false);\n                }\n                else {\n                    this.singleSpace();\n                }\n            }\n            else if (this.ch === ']') {\n                this.output.push(this.ch);\n            }\n            else if (this.ch === '[' || this.ch === '=') {\n                // no whitespace before or after\n                this.eatWhitespace();\n                this.output.push(this.ch);\n            }\n            else {\n                if (isAfterSpace) {\n                    this.singleSpace();\n                }\n\n                this.output.push(this.ch);\n            }\n        }\n\n        let sweetCode = this.output.join('').replace(/[\\n ]+$/, '');\n\n        // establish end_with_newline\n        let should = endWithNewline;\n        let actually = /\\n$/.test(sweetCode);\n\n        if (should && !actually) {\n            sweetCode += \"\\n\";\n        }\n        else if (!should && actually) {\n            sweetCode = sweetCode.slice(0, -1);\n        }\n\n        return sweetCode;\n    }\n}"],"sourceRoot":"../../../src"}