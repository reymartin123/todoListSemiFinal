{"version":3,"sources":["propertyFields/codeEditor/CodeFormatter.ts"],"names":[],"mappings":";;AAAA,+CAA8C;AAC9C,qDAAoD;AAEpD;;GAEG;AACH;IAAA;IA2DA,CAAC;IAzDG;;;OAGG;IACI,iCAAS,GAAhB,UAAiB,MAAc;QAC3B,IAAI,YAAY,GAAiB,IAAI,2BAAY,EAAE,CAAC;QACpD,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,oCAAY,GAAnB,UAAoB,SAAiB;QACjC,IAAI,eAAe,GAAoB,IAAI,iCAAe,EAAE,CAAC;QAC7D,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,iCAAS,GAAhB,UAAiB,MAAc;QAC3B,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;YACjC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;YAED,MAAM,IAAI,MAAM,GAAG,GAAG,GAAG,OAAO,GAAG,OAAO,CAAC;YAE3C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBACpC,MAAM,IAAI,GAAG,CAAC;YAClB,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACI,kCAAU,GAAjB,UAAkB,OAAe;QAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,kCAAU,GAAjB,UAAkB,OAAe;QAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC;IACL,oBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DY,sCAAa","file":"propertyFields/codeEditor/CodeFormatter.js","sourcesContent":["import { CSSFormatter } from './CSSFormatter';\nimport { ScriptFormatter } from './ScriptFormatter';\n\n/**\n * Helper class to format the code.\n */\nexport class CodeFormatter {\n\n    /**\n     * Formats CSS code\n     * @param rawCSS \n     */\n    public formatCSS(rawCSS: string): string {\n        let cssFormatter: CSSFormatter = new CSSFormatter();\n        return cssFormatter.css_beautify(rawCSS, null);\n    }\n\n    /**\n     * Formats JavaScript code\n     * @param rawScript \n     */\n    public formatScript(rawScript: string): string {\n        let scriptFormatter: ScriptFormatter = new ScriptFormatter();\n        return scriptFormatter.js_beautify(rawScript, null);\n    }\n\n    /**\n     * Formats XML code\n     * @param rawXML\n     */\n    public formatXML(rawXML: string): string {\n        let tab = '\\t';\n        let result = '';\n        let indent = '';\n\n        rawXML.split(/>\\s*</).forEach(element => {\n            if (element.match(/^\\/\\w/)) {\n                indent = indent.substring(tab.length);\n            }\n\n            result += indent + '<' + element + '>\\r\\n';\n\n            if (element.match(/^<?\\w[^>]*[^\\/]$/)) {\n                indent += tab;\n            }\n        });\n\n        return result.substring(1, result.length - 3);\n    }\n\n    /**\n     * Formats HTML code\n     * @param rawHTML\n     */\n    public formatHTML(rawHTML: string): string {\n        return this.formatXML(rawHTML);\n    }\n\n    /**\n     * Formats JSON code\n     * @param rawJSON \n     */\n    public formatJSON(rawJSON: string): string {\n        return JSON.stringify(JSON.parse(rawJSON), null, 2);\n    }\n}"],"sourceRoot":"../../../src"}