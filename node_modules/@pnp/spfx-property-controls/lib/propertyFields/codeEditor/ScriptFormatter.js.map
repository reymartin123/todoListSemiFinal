{"version":3,"sources":["propertyFields/codeEditor/ScriptFormatter.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH;IAAA;QAAA,iBA+sDC;QA9sDW,uBAAkB,GAAQ,qDAAqD,CAAC;QAChF,iCAA4B,GAAQ,smIAAsmI,CAAC;QAC3oI,4BAAuB,GAAQ,0oEAA0oE,CAAC;QAC1qE,4BAAuB,GAAW,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,4BAA4B,GAAG,GAAG,CAAC,CAAC;QAC5F,uBAAkB,GAAW,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAC;QA2BtH,qBAAgB,GAAW,EAAE,CAAC;QAE9B,SAAI,GAAQ;YAChB,cAAc,EAAE,gBAAgB;YAChC,SAAS,EAAE,WAAW;YACtB,aAAa,EAAE,eAAe;YAC9B,YAAY,EAAE,cAAc;YAC5B,cAAc,EAAE,gBAAgB;YAChC,WAAW,EAAE,aAAa;YAC1B,UAAU,EAAE,YAAY,CAAC,gBAAgB;SAC5C,CAAC;QAEM,aAAQ,GAAQ;YACpB,eAAe,EAAE,IAAI,CAAC,iBAAiB;YACvC,aAAa,EAAE,IAAI,CAAC,eAAe;YACnC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB;YACzC,cAAc,EAAE,IAAI,CAAC,gBAAgB;YACrC,SAAS,EAAE,IAAI,CAAC,WAAW;YAC3B,aAAa,EAAE,IAAI,CAAC,WAAW;YAC/B,cAAc,EAAE,IAAI,CAAC,gBAAgB;YACrC,WAAW,EAAE,IAAI,CAAC,aAAa;YAC/B,WAAW,EAAE,IAAI,CAAC,aAAa;YAC/B,aAAa,EAAE,IAAI,CAAC,eAAe;YACnC,UAAU,EAAE,IAAI,CAAC,YAAY;YAC7B,kBAAkB,EAAE,IAAI,CAAC,oBAAoB;YAC7C,mBAAmB,EAAE,IAAI,CAAC,qBAAqB;YAC/C,YAAY,EAAE,IAAI,CAAC,cAAc;YACjC,QAAQ,EAAE,IAAI,CAAC,UAAU;YACzB,YAAY,EAAE,IAAI,CAAC,cAAc;SACpC,CAAC;QAEF,gDAAgD;QACxC,YAAO,GAAQ,oBAAoB,CAAC;QAE5C,kGAAkG;QAC1F,cAAS,GAAQ,0BAA0B,CAAC;QAEpD,4DAA4D;QACpD,sBAAiB,GAAG,UAAC,IAAS;YAClC,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAE5B,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;QACxF,CAAC,CAAA;QAED,2DAA2D;QACnD,qBAAgB,GAAG,UAAC,IAAS;YACjC,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAC5B,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBAAC,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAE5B,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;QACnF,CAAC,CAAA;IAsnDL,CAAC;IApnDW,sCAAY,GAApB,UAAqB,UAAe,EAAE,IAAS;QAC3C,IAAI,iBAAiB,GAAW,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;YACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,UAAU,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC,CAAC;gBACnD,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;YACrD,CAAC;QACL,CAAC;QAED,IAAI,UAAU,GAAQ;YAClB,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,UAAU;YAClB,SAAS,EAAE,UAAU,GAAG,UAAU,CAAC,SAAS,GAAG,EAAE;YACjD,SAAS,EAAE,UAAU,GAAG,UAAU,CAAC,SAAS,GAAG,EAAE;YACjD,qBAAqB,EAAE,KAAK;YAC5B,sBAAsB,EAAE,KAAK;YAC7B,eAAe,EAAE,KAAK;YACtB,eAAe,EAAE,KAAK;YACtB,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,KAAK;YACf,iBAAiB,EAAE,KAAK;YACxB,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,KAAK;YAChB,iBAAiB,EAAE,iBAAiB;YACpC,iBAAiB,EAAE,UAAU,GAAG,UAAU,CAAC,iBAAiB,GAAG,iBAAiB;YAChF,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM;YAC1C,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,CAAC;SACnB,CAAC;QAEF,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED,sFAAsF;IAC9E,4CAAkB,GAA1B;QACI,MAAM,CAAC;YACH,IAAI,EAAE,EAAE;SACX,CAAC;IACN,CAAC;IAEO,qCAAW,GAAnB,UAAoB,YAAY;QAC5B,YAAY,GAAG,CAAC,YAAY,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,YAAY,CAAC;QAEnE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAEvE,OAAO,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC;gBAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACpE,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;gBACxB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3E,CAAC;QACL,CAAC;IACL,CAAC;IAEO,0CAAgB,GAAxB,UAAyB,IAAI;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM;YACnB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG;gBACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa;gBACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACjE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACpB,CAAC;IACL,CAAC;IAEO,8BAAI,GAAZ,UAAa,CAAC;QACV,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,8EAA8E;IACtE,wCAAc,GAAtB,UAAuB,CAAC;QACpB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC3B,IAAI,GAAG,GAAQ,EAAE,CAAC;QAClB,IAAI,GAAG,GAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE/B,OAAO,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC;YAChB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;YAC9B,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YACzB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEO,4CAAkB,GAA1B;QACI,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;IAClC,CAAC;IAEO,8CAAoB,GAA5B;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,wCAAwC;YACzD,CAAC;YAED,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;QAClC,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,yDAA+B,GAAvC,UAAwC,cAAmB;QACvD,cAAc,GAAG,CAAC,cAAc,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,cAAc,CAAC;QAEzE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAC/C,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChE,IAAI,oBAAoB,GAAW,CAAC,CAAC;YAErC,wCAAwC;YACxC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,yBAAyB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrH,EAAE,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACpD,cAAc,GAAG,IAAI,CAAC;gBAC1B,CAAC;YACL,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC9G,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEhC,gEAAgE;YAChE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACtH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC/B,CAAC;QACL,CAAC;IACL,CAAC;IAEO,uCAAa,GAArB,UAAsB,aAAsB,EAAE,wBAAiC;QAC3E,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QAEvC,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;gBACnI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;oBAC7F,IAAI,CAAC,YAAY,EAAE,CAAC;gBACxB,CAAC;YACL,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,CAAC,8BAA8B;QAC1C,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;QACtD,CAAC;IACL,CAAC;IAEO,sDAA4B,GAApC;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC5B,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEhE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACjG,mDAAmD;gBACnD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;oBACtE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpD,CAAC;YACL,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC1C,CAAC;gBAED,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3F,CAAC;QACL,CAAC;IACL,CAAC;IAEO,6CAAmB,GAA3B,UAA4B,KAAU;QAClC,iEAAiE;QACjE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEhE,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACrC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACvC,CAAC;QACL,CAAC;IACL,CAAC;IAEO,kDAAwB,GAAhC;QACI,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEhE,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACrD,IAAI,WAAW,GAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,WAAW,KAAK,GAAG,IAAI,WAAW,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC5D,sCAAsC;gBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC;IAEO,qCAAW,GAAnB,UAAoB,eAAe;QAC/B,eAAe,GAAG,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC;QACrD,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/E,CAAC;IAEO,gCAAM,GAAd;QACI,IAAI,CAAC,KAAK,CAAC,iBAAiB,IAAI,CAAC,CAAC;IACtC,CAAC;IAEO,kCAAQ,GAAhB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,CAAC;YAChC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAC7F,IAAI,CAAC,KAAK,CAAC,iBAAiB,IAAI,CAAC,CAAC;IAC1C,CAAC;IAEO,sDAA4B,GAApC,UAAqC,KAAU;QAC3C,wDAAwD;QACxD,0DAA0D;QAC1D,qEAAqE;QACrE,6CAA6C;QAC7C,uDAAuD;QAEvD,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC;YAAC,MAAM,CAAC;QAElC,uDAAuD;QACvD,IAAI,KAAK,GAAQ,KAAK,CAAC,gBAAgB,CAAC;QACxC,IAAI,YAAY,GAAW,CAAC,CAAC;QAC7B,IAAI,IAAS,CAAC;QAEd,OAAO,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YACtC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAChC,KAAK,EAAE,CAAC;YAER,mBAAmB;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzB,QAAQ,CAAC;YACb,CAAC;YAED,uCAAuC;YACvC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAClE,YAAY,GAAG,CAAC,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,YAAY,GAAG,CAAC,CAAC;YACrB,CAAC;YAED,gCAAgC;YAChC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACtC,CAAC;QACL,CAAC;IACL,CAAC;IAEO,kCAAQ,GAAhB,UAAiB,IAAI;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAC9D,CAAC;IAEO,kCAAQ,GAAhB,UAAiB,IAAS;QACtB,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3C,CAAC;IAEO,uCAAa,GAArB,UAAsB,IAAS;QAC3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxG,CAAC;IAEO,sCAAY,GAApB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC;YACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;YAEnC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC;IACL,CAAC;IAEO,kDAAwB,GAAhC;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,CAAC;IACzH,CAAC;IAEO,4CAAkB,GAA1B;QACI,EAAE,CAAC,CACC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC;YACnI,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC;YACnE,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;YACrG,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC;YACzI,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtJ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,EAAE,CAAC;YAEd,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gBACpI,IAAI,CAAC,KAAK,CAAC,qBAAqB,GAAG,IAAI,CAAC;YAC5C,CAAC;YAED,6EAA6E;YAC7E,+CAA+C;YAC/C,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACxI,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAE5B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,8CAAoB,GAA5B,UAA6B,KAAU,EAAE,CAAM;QAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5C,IAAI,IAAI,GAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,yCAAe,GAAvB,UAAwB,IAAY;QAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAChF,CAAC;IAEO,kCAAQ,GAAhB,UAAiB,IAAS,EAAE,GAAQ;QAChC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,yCAAe,GAAvB,UAAwB,CAAS;QAC7B,IAAI,GAAG,GAAY,KAAK,CAAC;QACzB,IAAI,GAAG,GAAW,EAAE,CAAC;QACrB,IAAI,GAAG,GAAW,CAAC,CAAC;QACpB,IAAI,KAAK,GAAW,EAAE,CAAC;QACvB,IAAI,OAAO,GAAW,CAAC,CAAC;QACxB,IAAI,CAAM,CAAC;QAEX,OAAO,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;YAC3B,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAClB,GAAG,EAAE,CAAC;YAEN,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,GAAG,GAAG,KAAK,CAAC;gBACZ,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACZ,yBAAyB;oBACzB,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACzB,GAAG,IAAI,CAAC,CAAC;gBACb,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACnB,yBAAyB;oBACzB,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACzB,GAAG,IAAI,CAAC,CAAC;gBACb,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,6BAA6B;oBAC7B,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC;oBAChB,QAAQ,CAAC;gBACb,CAAC;gBACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;oBAC9C,iCAAiC;oBACjC,8BAA8B;oBAC9B,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAED,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAE9B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;oBACpC,4BAA4B;oBAC5B,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBACZ,GAAG,IAAI,KAAK,GAAG,KAAK,CAAC;oBACzB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,GAAG,IAAI,KAAK,GAAG,KAAK,CAAC;oBACzB,CAAC;oBACD,QAAQ,CAAC;gBACb,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;oBAChE,qDAAqD;oBACrD,GAAG,IAAI,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC/C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,OAAO,GAAG,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;oBACtD,6BAA6B;oBAC7B,gCAAgC;oBAChC,qCAAqC;oBACrC,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACxC,CAAC;YACL,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBAClB,GAAG,GAAG,IAAI,CAAC;YACf,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,GAAG,IAAI,CAAC,CAAC;YACb,CAAC;QACL,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEO,iCAAO,GAAf,UAAgB,IAAS;QACrB,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;YACrD,SAAS,EAAE,CAAC;YACZ,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAED,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;QACD,MAAM,CAAC,CAAC,KAAK,IAAI,CAAC;IACtB,CAAC;IAGO,wCAAc,GAAtB;QACI,IAAI,CAAM,CAAC;QACX,IAAI,gBAAqB,CAAC;QAE1B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QAEpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAElC,IAAI,CAAC,GAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;QAErB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YACvC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACrB,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC1D,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC3C,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACvC,MAAM,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC1B,CAAC;YAED,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACvC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;QACzB,CAAC;QAED,wFAAwF;QACxF,gEAAgE;QAChE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;oBACnE,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACxC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;oBAErB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBACxC,KAAK,CAAC;oBACV,CAAC;gBACL,CAAC;YACL,CAAC;YAED,8DAA8D;YAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBACjK,IAAI,IAAI,GAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACnD,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBAErB,IAAI,CAAC,GAAQ,IAAI,CAAC,cAAc,EAAE,CAAC;gBACnC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAC1B,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,QAAQ;gBAC7B,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;mBACvF,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;gBAC9B,CAAC;gBACD,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAC9B,CAAC;YACD,MAAM,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC1B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QAChC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAC9B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;QACjC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;QAC/B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;QAC/B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,IAAI,OAAO,GAAW,EAAE,CAAC;YAEzB,6BAA6B;YAC7B,IAAI,cAAc,GAAY,IAAI,CAAC;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;oBACtC,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;wBACtL,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBACvC,OAAO,IAAI,CAAC,CAAC;wBAEb,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4BAC3B,cAAc,GAAG,KAAK,CAAC;wBAC3B,CAAC;wBAED,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;4BACvC,KAAK,CAAC;wBACV,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC1C,MAAM,CAAC,CAAC,IAAI,GAAG,OAAO,GAAG,IAAI,EAAE,mBAAmB,CAAC,CAAC;gBACxD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,CAAC,IAAI,GAAG,OAAO,GAAG,IAAI,EAAE,kBAAkB,CAAC,CAAC;gBACvD,CAAC;YACL,CAAC;YAED,0BAA0B;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC7C,OAAO,GAAG,CAAC,CAAC;gBACZ,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE,CAAC;oBAChG,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;oBAErB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBACvC,KAAK,CAAC;oBACV,CAAC;gBACL,CAAC;gBACD,MAAM,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG;YACnC,CACI,CAAC,CAAC,KAAK,GAAG,CAAC;gBACX,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,iHAAiH,CAAC,CAAC,CAAC,MAAM;aACvM,IAAI,CACD,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAChF,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBAChI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,gBAAgB;oBAC3E,cAAc,EAAE,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE,UAAU;iBACnF,CAAC,CAAC,CACN,CAAC,CAAC,CAAC;YAEJ,IAAI,GAAG,GAAG,CAAC,EACP,GAAG,GAAG,KAAK,EACX,gBAAgB,GAAG,KAAK,CAAC;YAE7B,gBAAgB,GAAG,CAAC,CAAC;YAErB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACtC,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;oBACd,EAAE;oBACF,gBAAgB;oBAChB,EAAE;oBACF,IAAI,aAAa,GAAY,KAAK,CAAC;oBACnC,OAAO,GAAG,IAAI,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;wBACxE,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBACvD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACP,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC;4BAClD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gCAC7C,aAAa,GAAG,IAAI,CAAC;4BACzB,CAAC;4BACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gCAClD,aAAa,GAAG,KAAK,CAAC;4BAC1B,CAAC;wBACL,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,GAAG,GAAG,KAAK,CAAC;wBAChB,CAAC;wBAED,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;4BACvC,mDAAmD;4BACnD,+CAA+C;4BAC/C,MAAM,CAAC,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;wBAC3C,CAAC;oBACL,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;oBACnC,EAAE;oBACF,0BAA0B;oBAC1B,EAAE;oBACF,IAAI,SAAS,GAAW,wHAAwH,CAAC;oBACjJ,IAAI,MAAM,GAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;oBACxD,IAAI,KAAK,GAAoB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEpD,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,OAAO,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC/B,IAAI,KAAK,GAAW,CAAC,CAAC;wBAEtB,OAAO,KAAK,EAAE,CAAC;4BACX,IAAI,QAAQ,GAAY,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACnC,IAAI,OAAO,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;4BAC/B,IAAI,cAAc,GAAY,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC;4BAElG,EAAE,CAAC,CAAC,OAAO,KAAK,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gCACzC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oCACX,EAAE,KAAK,CAAC;gCACZ,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,EAAE,KAAK,CAAC;gCACZ,CAAC;4BACL,CAAC;4BACD,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gCACb,KAAK,CAAC;4BACV,CAAC;4BACD,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACnC,CAAC;wBAED,IAAI,SAAS,GAAQ,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;wBAC3E,IAAI,CAAC,UAAU,IAAI,SAAS,GAAG,CAAC,CAAC;wBACjC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;oBACrD,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,EAAE;oBACF,gBAAgB;oBAChB,EAAE;oBACF,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;wBACvD,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBAEvD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gCAC3F,gBAAgB,GAAG,IAAI,CAAC;4BAC5B,CAAC;4BACD,GAAG,GAAG,KAAK,CAAC;wBAChB,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC;wBACtD,CAAC;wBAED,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;4BACvC,mDAAmD;4BACnD,+CAA+C;4BAC/C,MAAM,CAAC,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;wBAC3C,CAAC;oBACL,CAAC;gBACL,CAAC;YACL,CAAC;YAED,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;YACrB,gBAAgB,IAAI,GAAG,CAAC;YAExB,EAAE,CAAC,CAAC,gBAAgB,IAAI,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAChD,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAC9D,CAAC;YAED,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;gBACd,+DAA+D;gBAC/D,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAC7G,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACvD,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACzB,CAAC;YACL,CAAC;YACD,MAAM,CAAC,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;QAC3C,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;gBACxE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC7C,gBAAgB,GAAG,CAAC,CAAC;gBAErB,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;oBACvD,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACvC,gBAAgB,IAAI,CAAC,CAAC;oBACtB,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACzB,CAAC;gBAED,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,IAAI,EAAE,YAAY,CAAC,CAAC;YAC9D,CAAC;YAED,gEAAgE;YAChE,iEAAiE;YACjE,mFAAmF;YACnF,IAAI,KAAK,GAAQ,GAAG,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxG,GAAG,CAAC;oBACA,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACvC,KAAK,IAAI,CAAC,CAAC;oBACX,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACzB,CAAC,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;gBAExE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACZ,EAAE;gBACN,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACpG,KAAK,IAAI,IAAI,CAAC;oBACd,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACzB,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACpG,KAAK,IAAI,IAAI,CAAC;oBACd,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACzB,CAAC;gBACD,MAAM,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;YACzF,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;YACrB,CAAC,GAAG,MAAM,CAAC;YAEX,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;gBACxF,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACxC,IAAI,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC;YAED,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;YAClC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;YACtH,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;YACnC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;YACrB,MAAM,CAAC,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACjC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC9G,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACxC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBAErB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;oBACvC,KAAK,CAAC;gBACV,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3B,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAC5B,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;QAED,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;IAC7B,CAAC;IAEO,2CAAiB,GAAzB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC5B,uDAAuD;QAC3D,CAAC;QAED,IAAI,SAAS,GAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;YAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC/D,mDAAmD;gBACnD,gBAAgB;gBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAC9F,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBAC1C,CAAC;gBAED,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,MAAM,EAAE,CAAC;gBAEd,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBAC1C,CAAC;gBAED,MAAM,CAAC;YACX,CAAC;YAED,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG;oBAC5B,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,KAAK,GAAG,IAAI,IAAI,CAAC,cAAc,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjG,wBAAwB;oBACxB,wBAAwB;oBACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBACnC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBACpC,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC;gBACrE,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;YACzC,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,+BAA+B;YACnC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,KAAK,gBAAgB,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,SAAS,KAAK,eAAe,IAAI,IAAI,CAAC,SAAS,KAAK,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YACnJ,uFAAuF;YACvF,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAChE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,+CAA+C;QACnD,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;YAC1I,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtH,4BAA4B;YAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC;YACzI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;QACL,CAAC;QAED,gDAAgD;QAChD,YAAY;QACZ,iBAAiB;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,WAAW,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;gBACrE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;oBACnC,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;gBACpD,CAAC;YACL,CAAC;QACL,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC1C,CAAC;QAED,gFAAgF;QAChF,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,yCAAe,GAAvB;QACI,6DAA6D;QAC7D,4DAA4D;QAC5D,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC7C,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpI,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,eAAe,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACvE,kEAAkE;gBAClE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC5B,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEvD,gDAAgD;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEhC,CAAC;IACL,CAAC;IAEO,4CAAkB,GAA1B;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAExC,IAAI,YAAY,GAAY,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,wBAAwB,GAAY,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC;QAEhI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa;gBAChC,CAAC,wBAAwB;oBACrB,IAAI,CAAC,SAAS,KAAK,WAAW;oBAC9B,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3H,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,SAAS,KAAK,eAAe,CAAC,CAAC,CAAC;gBACzE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,gBAAgB,CAAC,CAAC,CAAC;oBACtC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBAC1C,CAAC;YACL,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,kCAAkC;gBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC1E,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,GAAG,CAAC,CAAC,CAAC;wBAC9B,wBAAwB;wBACxB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;oBAC1C,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,cAAc;oBACnD,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEO,0CAAgB,GAAxB;QACI,4DAA4D;QAC5D,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC7C,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QAED,IAAI,YAAY,GAAY,IAAI,CAAC,SAAS,KAAK,gBAAgB,CAAC;QAEhE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU;YACV,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC;oBACpE,8DAA8D;oBAC9D,IAAI,CAAC,GAAG,CAAC,sBAAsB,GAAG,KAAK,CAAC;oBACxC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBAChC,IAAI,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC;gBAC3C,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;YACL,CAAC;QACL,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEO,qCAAW,GAAnB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC5B,uDAAuD;QAC3D,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACtE,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC;YACtG,IAAI,CAAC,SAAS,KAAK,WAAW;YAC9B,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpJ,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,OAAO,CAAC,CAAC,CAAC;gBACnE,oBAAoB;gBACpB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBACtC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAC3B,MAAM,CAAC;YACX,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,mDAAmD;gBACnD,8CAA8C;gBAC9C,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAChC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;YAChC,CAAC;QACL,CAAC;QAED,qCAAqC;QACrC,6BAA6B;QAC7B,6EAA6E;QAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9F,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;YACjC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC7C,IAAI,CAAC,YAAY,EAAE,CAAC;gBACxB,CAAC;gBAED,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;gBAC5B,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;YAClC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YACvI,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChD,qCAAqC;gBACrC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;YACjC,CAAC;YAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC;YACpC,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/I,mEAAmE;gBACnE,mCAAmC;gBACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1D,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBAChC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnC,CAAC;YACL,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBACnE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3G,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBAC1C,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;YACL,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;gBACxE,iBAAiB;gBACjB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3C,YAAY;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,eAAe,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;YAC5I,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;YACpD,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YACvC,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvG,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YAC5B,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,YAAY,CAAC,CAAC,CAAC;oBAC7E,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;gBAC5B,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;oBACtB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;gBAC1C,CAAC;YACL,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACzF,8CAA8C;YAC9C,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,gBAAgB,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAC5B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;YAC1H,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;YAC1B,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YAC5B,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACpG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,YAAY,CAAC,CAAC,CAAC;gBAClH,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAEhE,yEAAyE;gBACzE,2DAA2D;gBAC3D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC1C,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;gBAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACjF,kCAAkC;gBAClC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,eAAe,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC1K,wDAAwD;oBACxD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;wBACnI,6BAA6B;wBAC7B,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;oBAC1C,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBACpC,CAAC;gBACL,CAAC;YACL,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC/H,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,cAAc,KAAK,GAAG,CAAC,CAAC,CAAC;YACrG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,sCAAsC;QAC3E,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC1C,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC/B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC/B,CAAC;IACL,CAAC;IAEO,0CAAgB,GAAxB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC5B,uDAAuD;YACvD,sDAAsD;YACtD,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QAC3C,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAC7F,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YAC9C,kEAAkE;YAClE,2CAA2C;YAC3C,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;QAC/C,CAAC;IACL,CAAC;IAEO,uCAAa,GAArB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAC5B,uDAAuD;YACvD,wDAAwD;YACxD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,eAAe,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;YACjJ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;YACpD,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEO,uCAAa,GAArB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACnC,0FAA0F;YAC1F,IAAI,CAAC,KAAK,CAAC,sBAAsB,GAAG,IAAI,CAAC;QAC7C,CAAC;QAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAC1C,CAAC;IAEO,sCAAY,GAApB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7C,+CAA+C;gBAC/C,IAAI,CAAC,KAAK,CAAC,sBAAsB,GAAG,KAAK,CAAC;YAC9C,CAAC;YAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAK,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBAC1C,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;YAED,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC9E,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,mBAAmB;gBACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC;QACL,CAAC;IACL,CAAC;IAEO,yCAAe,GAAvB;QACI,IAAI,YAAY,GAAY,IAAI,CAAC;QACjC,IAAI,WAAW,GAAY,IAAI,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjF,8EAA8E;YAC9E,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QAED,qCAAqC;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAChG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YAC3B,sDAAsD;YACtD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QAED,4DAA4D;QAC5D,kFAAkF;QAClF,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,wCAAwC;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,gBAAgB,EAAE,eAAe,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACnS,wEAAwE;YACxE,YAAY,GAAG,KAAK,CAAC;YACrB,WAAW,GAAG,KAAK,CAAC;YAEpB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtE,eAAe;gBACf,aAAa;gBACb,YAAY,GAAG,IAAI,CAAC;YACxB,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC;gBACnC,YAAY,GAAG,IAAI,CAAC;YACxB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9J,eAAe;gBACf,gBAAgB;gBAChB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;gBAC9C,CAAC;gBACD,YAAY,GAAG,KAAK,CAAC;YACzB,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;YAClC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,IAAI,YAAY,CAAC;QAChF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,yBAAyB,GAAG,WAAW,CAAC;IACjD,CAAC;IAEO,8CAAoB,GAA5B;QACI,IAAI,KAAK,GAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,CAAS,CAAC,CAAC,yBAAyB;QACxC,IAAI,OAAO,GAAY,KAAK,CAAC;QAE7B,uCAAuC;QACvC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAEhC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBACjD,OAAO,GAAG,IAAI,CAAC;YACnB,CAAC;QACL,CAAC;QAED,6BAA6B;QAC7B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEhC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,kCAAkC;gBAClC,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,6BAA6B;gBAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,CAAC;QACL,CAAC;QAED,yEAAyE;QACzE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAEO,+CAAqB,GAA7B;QACI,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAC1C,CAAC;IAEO,wCAAc,GAAtB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAEO,oCAAU,GAAlB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,aAAa,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,CAAC;YACF,kDAAkD;YAClD,gFAAgF;YAChF,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACzG,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEO,wCAAc,GAAtB;QACI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;IACL,CAAC;IAEO,kCAAQ,GAAhB;QACI,uBAAuB;QACvB,IAAI,CAAM,CAAC;QACX,IAAI,CAAS,CAAC;QACd,IAAI,eAAoB,CAAC;QACzB,IAAI,UAAkB,CAAC;QAEvB,OAAO,IAAI,EAAE,CAAC;YACV,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC/B,6BAA6B;gBAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC7C,IAAI,CAAC,YAAY,EAAE,CAAC;gBACxB,CAAC;gBACD,KAAK,CAAC;YACV,CAAC;YAED,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,sBAAsB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YAEhD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;oBACtC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;YACL,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBACrF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC;gBACrD,CAAC;gBAED,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;wBAEhC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;4BACtC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;wBACpC,CAAC;oBACL,CAAC;gBACL,CAAC;YACL,CAAC;YAED,mCAAmC;YACnC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACtB,KAAK,eAAe;oBAChB,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,KAAK,CAAC;gBACV,KAAK,aAAa;oBACd,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,KAAK,CAAC;gBACV,KAAK,gBAAgB;oBACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,KAAK,CAAC;gBACV,KAAK,cAAc;oBACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACxB,KAAK,CAAC;gBACV,KAAK,SAAS;oBACV,IAAI,CAAC,WAAW,EAAE,CAAC;oBACnB,KAAK,CAAC;gBACV,KAAK,aAAa;oBACd,IAAI,CAAC,WAAW,EAAE,CAAC;oBACnB,KAAK,CAAC;gBACV,KAAK,cAAc;oBACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACxB,KAAK,CAAC;gBACV,KAAK,WAAW;oBACZ,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,KAAK,CAAC;gBACV,KAAK,WAAW;oBACZ,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,KAAK,CAAC;gBACV,KAAK,aAAa;oBACd,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,KAAK,CAAC;gBACV,KAAK,UAAU;oBACX,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,KAAK,CAAC;gBACV,KAAK,kBAAkB;oBACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,KAAK,CAAC;gBACV,KAAK,mBAAmB;oBACpB,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,KAAK,CAAC;gBACV,KAAK,YAAY;oBACb,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,KAAK,CAAC;gBACV,KAAK,QAAQ;oBACT,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,KAAK,CAAC;gBACV,KAAK,YAAY;oBACb,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,KAAK,CAAC;YACd,CAAC;YAED,yFAAyF;YACzF,+DAA+D;YAC/D,6EAA6E;YAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,mBAAmB,IAAI,IAAI,CAAC,UAAU,KAAK,YAAY;gBAC3E,IAAI,CAAC,UAAU,KAAK,kBAAkB,IAAI,IAAI,CAAC,UAAU,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC7E,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;gBAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;gBACjC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YAC3C,CAAC;YAED,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,KAAK,mBAAmB,IAAI,IAAI,CAAC,UAAU,KAAK,YAAY,IAAI,IAAI,CAAC,UAAU,KAAK,kBAAkB,CAAC,CAAC;QACrJ,CAAC;QAED,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChD,GAAG,CAAC,CAAC,IAAI,UAAU,GAAW,CAAC,EAAE,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC;YACnF,UAAU,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,qCAAW,GAAlB,UAAmB,cAAsB,EAAE,OAAY;QACnD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,kEAAkE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAErC,IAAI,CAAC,KAAK,GAAG,oHAAoH,CAAC;QAClI,IAAI,CAAC,KAAK,IAAI,sBAAsB,CAAC,CAAC,4EAA4E;QAClH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEnC,+CAA+C;QAC/C,IAAI,CAAC,aAAa,GAAG,yFAAyF,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1H,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;QAEzH,mEAAmE;QACnE,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QAEd,gBAAgB;QAChB,EAAE,CAAC,CAAC,OAAO,CAAC,yBAAyB,KAAK,SAAS,IAAI,OAAO,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;YACxF,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,yBAAyB,CAAC;QAC7D,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC;YAC3C,yCAAyC;YACzC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,kBAAkB,GAAG,QAAQ,GAAG,UAAU,CAAC;QAC9E,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC;QAE9H,yCAAyC;QACzC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,KAAK,eAAe,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC;QACvE,IAAI,CAAC,GAAG,CAAC,iBAAiB,GAAG,CAAC,OAAO,CAAC,iBAAiB,KAAK,SAAS,CAAC,GAAG,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAC1G,IAAI,CAAC,GAAG,CAAC,qBAAqB,GAAG,CAAC,OAAO,CAAC,qBAAqB,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,qBAAqB,CAAC;QACvH,IAAI,CAAC,GAAG,CAAC,qBAAqB,GAAG,CAAC,OAAO,CAAC,qBAAqB,KAAK,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;QACjI,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,CAAC,OAAO,CAAC,cAAc,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;QAClG,IAAI,CAAC,GAAG,CAAC,oBAAoB,GAAG,CAAC,OAAO,CAAC,oBAAoB,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,oBAAoB,CAAC;QACpH,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,OAAO,CAAC,YAAY,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC;QAC5F,IAAI,CAAC,GAAG,CAAC,sBAAsB,GAAG,CAAC,OAAO,CAAC,sBAAsB,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC1H,IAAI,CAAC,GAAG,CAAC,wBAAwB,GAAG,CAAC,OAAO,CAAC,wBAAwB,KAAK,SAAS,CAAC,GAAG,IAAI,GAAG,OAAO,CAAC,wBAAwB,CAAC;QAC/H,IAAI,CAAC,GAAG,CAAC,gBAAgB,GAAG,CAAC,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC;QACxG,IAAI,CAAC,GAAG,CAAC,gBAAgB,GAAG,CAAC,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAClH,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC;QAEjE,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,cAAc,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC;YAC/F,IAAI,CAAC,gBAAgB,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;QAE5B,6BAA6B;QAC7B,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC;QAE1C,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,CAAC,kBAAkB;QACrD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC,CAAC,sBAAsB;QAChD,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAElC,sDAAsD;QACtD,0FAA0F;QAC1F,mFAAmF;QACnF,+CAA+C;QAC/C,EAAE;QACF,oGAAoG;QACpG,6FAA6F;QAC7F,iFAAiF;QACjF,2EAA2E;QAC3E,wCAAwC;QACxC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAExC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QAEpB,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IACL,sBAAC;AAAD,CA/sDA,AA+sDC,IAAA;AA/sDY,0CAAe","file":"propertyFields/codeEditor/ScriptFormatter.js","sourcesContent":["/**\n * Helper class to format the JavaScript code.\n * Based on code initially developed by: http://jsbeautifier.org/\n * \n * Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy   !jslint_happy\n            ---------------------------------\n             function ()      function()\n\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n                be preserved if it were present.\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n */\nexport class ScriptFormatter {\n    private nonASCIIwhitespace: any = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n    private nonASCIIidentifierStartChars: any = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n    private nonASCIIidentifierChars: any = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n    private nonASCIIidentifierStart: RegExp = new RegExp(\"[\" + this.nonASCIIidentifierStartChars + \"]\");\n    private nonASCIIidentifier: RegExp = new RegExp(\"[\" + this.nonASCIIidentifierStartChars + this.nonASCIIidentifierChars + \"]\");\n\n    private input: any;\n    private output_lines: any;\n    private token_text: any;\n    private token_type: any;\n    private last_type: any;\n    private last_last_text: any;\n    private indent_string: any;\n    private flags: any;\n    private previous_flags: any;\n    private flag_store: any;\n    private whitespace: any;\n    private wordchar: any;\n    private punct: any;\n    private parser_pos: any;\n    private line_starters: any;\n    private reserved_words: any;\n    private digits: any;\n    private prefix: any;\n    private input_wanted_newline: any;\n    private output_wrapped: any;\n    private output_space_before_token: any;\n    private input_length: any;\n    private n_newlines: any;\n    private whitespace_before_token: any;\n    private opt: any;\n    private preindent_string: string = '';\n\n    private MODE: any = {\n        BlockStatement: 'BlockStatement', // 'BLOCK'\n        Statement: 'Statement', // 'STATEMENT'\n        ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n        ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n        ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n        Conditional: 'Conditional', //'(COND-EXPRESSION)',\n        Expression: 'Expression' //'(EXPRESSION)'\n    };\n\n    private handlers: any = {\n        'TK_START_EXPR': this.handle_start_expr,\n        'TK_END_EXPR': this.handle_end_expr,\n        'TK_START_BLOCK': this.handle_start_block,\n        'TK_END_BLOCK': this.handle_end_block,\n        'TK_WORD': this.handle_word,\n        'TK_RESERVED': this.handle_word,\n        'TK_SEMICOLON': this.handle_semicolon,\n        'TK_STRING': this.handle_string,\n        'TK_EQUALS': this.handle_equals,\n        'TK_OPERATOR': this.handle_operator,\n        'TK_COMMA': this.handle_comma,\n        'TK_BLOCK_COMMENT': this.handle_block_comment,\n        'TK_INLINE_COMMENT': this.handle_inline_comment,\n        'TK_COMMENT': this.handle_comment,\n        'TK_DOT': this.handle_dot,\n        'TK_UNKNOWN': this.handle_unknown\n    };\n\n    // Whether a single character denotes a newline.\n    private newline: any = /[\\n\\r\\u2028\\u2029]/;\n\n    // Matches a whole line break (where CRLF is considered a single line break). Used to count lines.\n    private lineBreak: any = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;\n\n    // Test whether a given character code starts an identifier.\n    private isIdentifierStart = (code: any): boolean => {\n        if (code < 65) return code === 36;\n        if (code < 91) return true;\n        if (code < 97) return code === 95;\n        if (code < 123) return true;\n\n        return code >= 0xaa && this.nonASCIIidentifierStart.test(String.fromCharCode(code));\n    }\n\n    // Test whether a given character is part of an identifier.\n    private isIdentifierChar = (code: any): boolean => {\n        if (code < 48) return code === 36;\n        if (code < 58) return true;\n        if (code < 65) return false;\n        if (code < 91) return true;\n        if (code < 97) return code === 95;\n        if (code < 123) return true;\n\n        return code >= 0xaa && this.nonASCIIidentifier.test(String.fromCharCode(code));\n    }\n\n    private create_flags(flags_base: any, mode: any) {\n        let next_indent_level: number = 0;\n        if (flags_base) {\n            next_indent_level = flags_base.indentation_level;\n            if (!this.just_added_newline() &&\n                flags_base.line_indent_level > next_indent_level) {\n                next_indent_level = flags_base.line_indent_level;\n            }\n        }\n\n        let next_flags: any = {\n            mode: mode,\n            parent: flags_base,\n            last_text: flags_base ? flags_base.last_text : '', // last token text\n            last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed\n            declaration_statement: false,\n            declaration_assignment: false,\n            in_html_comment: false,\n            multiline_frame: false,\n            if_block: false,\n            else_block: false,\n            do_block: false,\n            do_while: false,\n            in_case_statement: false, // switch(..){ INSIDE HERE }\n            in_case: false, // we're on the exact line with \"case 0:\"\n            case_body: false, // the indented case-action block\n            indentation_level: next_indent_level,\n            line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n            start_line_index: this.output_lines.length,\n            had_comment: false,\n            ternary_depth: 0\n        };\n\n        return next_flags;\n    }\n\n    // Using object instead of string to allow for later expansion of info about each line\n    private create_output_line(): any {\n        return {\n            text: []\n        };\n    }\n\n    private trim_output(eat_newlines): void {\n        eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n        if (this.output_lines.length) {\n            this.trim_output_line(this.output_lines[this.output_lines.length - 1]);\n\n            while (eat_newlines && this.output_lines.length > 1 &&\n                this.output_lines[this.output_lines.length - 1].text.length === 0) {\n                this.output_lines.pop();\n                this.trim_output_line(this.output_lines[this.output_lines.length - 1]);\n            }\n        }\n    }\n\n    private trim_output_line(line): void {\n        while (line.text.length &&\n            (line.text[line.text.length - 1] === ' ' ||\n                line.text[line.text.length - 1] === this.indent_string ||\n                line.text[line.text.length - 1] === this.preindent_string)) {\n            line.text.pop();\n        }\n    }\n\n    private trim(s): string {\n        return s.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    // We could use just string.split, but IE doesn't like returning empty strings\n    private split_newlines(s): any {\n        s = s.replace(/\\x0d/g, '');\n        let out: any = [];\n        let idx: any = s.indexOf(\"\\n\");\n\n        while (idx !== -1) {\n            out.push(s.substring(0, idx));\n            s = s.substring(idx + 1);\n            idx = s.indexOf(\"\\n\");\n        }\n\n        if (s.length) {\n            out.push(s);\n        }\n\n        return out;\n    }\n\n    private just_added_newline(): boolean {\n        let line: any = this.output_lines[this.output_lines.length - 1];\n        return line.text.length === 0;\n    }\n\n    private just_added_blankline(): boolean {\n        if (this.just_added_newline()) {\n            if (this.output_lines.length === 1) {\n                return true; // start of the file and newline = blank\n            }\n\n            let line: any = this.output_lines[this.output_lines.length - 2];\n            return line.text.length === 0;\n        }\n        return false;\n    }\n\n    private allow_wrap_or_preserved_newline(force_linewrap: any): void {\n        force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n        if (this.opt.wrap_line_length && !force_linewrap) {\n            let line: any = this.output_lines[this.output_lines.length - 1];\n            let proposed_line_length: number = 0;\n\n            // never wrap the first token of a line.\n            if (line.text.length > 0) {\n                proposed_line_length = line.text.join('').length + this.token_text.length + (this.output_space_before_token ? 1 : 0);\n                if (proposed_line_length >= this.opt.wrap_line_length) {\n                    force_linewrap = true;\n                }\n            }\n        }\n\n        if (((this.opt.preserve_newlines && this.input_wanted_newline) || force_linewrap) && !this.just_added_newline()) {\n            this.print_newline(false, true);\n\n            // Expressions and array literals already indent their contents.\n            if (!(this.is_array(this.flags.mode) || this.is_expression(this.flags.mode) || this.flags.mode === this.MODE.Statement)) {\n                this.output_wrapped = true;\n            }\n        }\n    }\n\n    private print_newline(force_newline: boolean, preserve_statement_flags: boolean): any {\n        this.output_wrapped = false;\n        this.output_space_before_token = false;\n\n        if (!preserve_statement_flags) {\n            if (this.flags.last_text !== ';' && this.flags.last_text !== ',' && this.flags.last_text !== '=' && this.last_type !== 'TK_OPERATOR') {\n                while (this.flags.mode === this.MODE.Statement && !this.flags.if_block && !this.flags.do_block) {\n                    this.restore_mode();\n                }\n            }\n        }\n\n        if (this.output_lines.length === 1 && this.just_added_newline()) {\n            return; // no newline on start of file\n        }\n\n        if (force_newline || !this.just_added_newline()) {\n            this.flags.multiline_frame = true;\n            this.output_lines.push(this.create_output_line());\n        }\n    }\n\n    private print_token_line_indentation(): void {\n        if (this.just_added_newline()) {\n            let line: any = this.output_lines[this.output_lines.length - 1];\n\n            if (this.opt.keep_array_indentation && this.is_array(this.flags.mode) && this.input_wanted_newline) {\n                // prevent removing of this whitespace as redundant\n                line.text.push('');\n                for (let i: number = 0; i < this.whitespace_before_token.length; i += 1) {\n                    line.text.push(this.whitespace_before_token[i]);\n                }\n            }\n            else {\n                if (this.preindent_string) {\n                    line.text.push(this.preindent_string);\n                }\n\n                this.print_indent_string(this.flags.indentation_level + (this.output_wrapped ? 1 : 0));\n            }\n        }\n    }\n\n    private print_indent_string(level: any): void {\n        // Never indent your first output indent at the start of the file\n        if (this.output_lines.length > 1) {\n            let line: any = this.output_lines[this.output_lines.length - 1];\n\n            this.flags.line_indent_level = level;\n            for (let i: number = 0; i < level; i += 1) {\n                line.text.push(this.indent_string);\n            }\n        }\n    }\n\n    private print_token_space_before(): void {\n        let line: any = this.output_lines[this.output_lines.length - 1];\n\n        if (this.output_space_before_token && line.text.length) {\n            let last_output: any = line.text[line.text.length - 1];\n            if (last_output !== ' ' && last_output !== this.indent_string) {\n                // prevent occassional duplicate space\n                line.text.push(' ');\n            }\n        }\n    }\n\n    private print_token(printable_token): void {\n        printable_token = printable_token || this.token_text;\n        this.print_token_line_indentation();\n        this.output_wrapped = false;\n        this.print_token_space_before();\n        this.output_space_before_token = false;\n        this.output_lines[this.output_lines.length - 1].text.push(printable_token);\n    }\n\n    private indent(): void {\n        this.flags.indentation_level += 1;\n    }\n\n    private deindent(): void {\n        if (this.flags.indentation_level > 0 &&\n            ((!this.flags.parent) || this.flags.indentation_level > this.flags.parent.indentation_level))\n            this.flags.indentation_level -= 1;\n    }\n\n    private remove_redundant_indentation(frame: any): void {\n        // This implementation is effective but has some issues:\n        //     - less than great performance due to array splicing\n        //     - can cause line wrap to happen too soon due to indent removal\n        //           after wrap points are calculated\n        // These issues are minor compared to ugly indentation.\n\n        if (frame.multiline_frame) return;\n\n        // remove one indent from each line inside this section\n        let index: any = frame.start_line_index;\n        let splice_index: number = 0;\n        let line: any;\n\n        while (index < this.output_lines.length) {\n            line = this.output_lines[index];\n            index++;\n\n            // skip empty lines\n            if (line.text.length === 0) {\n                continue;\n            }\n\n            // skip the preindent string if present\n            if (this.preindent_string && line.text[0] === this.preindent_string) {\n                splice_index = 1;\n            } else {\n                splice_index = 0;\n            }\n\n            // remove one indent, if present\n            if (line.text[splice_index] === this.indent_string) {\n                line.text.splice(splice_index, 1);\n            }\n        }\n    }\n\n    private set_mode(mode): void {\n        if (this.flags) {\n            this.flag_store.push(this.flags);\n            this.previous_flags = this.flags;\n        }\n        else {\n            this.previous_flags = this.create_flags(null, mode);\n        }\n\n        this.flags = this.create_flags(this.previous_flags, mode);\n    }\n\n    private is_array(mode: any): boolean {\n        return mode === this.MODE.ArrayLiteral;\n    }\n\n    private is_expression(mode: any): boolean {\n        return this.in_array(mode, [this.MODE.Expression, this.MODE.ForInitializer, this.MODE.Conditional]);\n    }\n\n    private restore_mode(): void {\n        if (this.flag_store.length > 0) {\n            this.previous_flags = this.flags;\n            this.flags = this.flag_store.pop();\n\n            if (this.previous_flags.mode === this.MODE.Statement) {\n                this.remove_redundant_indentation(this.previous_flags);\n            }\n        }\n    }\n\n    private start_of_object_property(): boolean {\n        return this.flags.mode === this.MODE.ObjectLiteral && this.flags.last_text === ':' && this.flags.ternary_depth === 0;\n    }\n\n    private start_of_statement(): boolean {\n        if (\n            (this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, ['var', 'let', 'const']) && this.token_type === 'TK_WORD') ||\n            (this.last_type === 'TK_RESERVED' && this.flags.last_text === 'do') ||\n            (this.last_type === 'TK_RESERVED' && this.flags.last_text === 'return' && !this.input_wanted_newline) ||\n            (this.last_type === 'TK_RESERVED' && this.flags.last_text === 'else' && !(this.token_type === 'TK_RESERVED' && this.token_text === 'if')) ||\n            (this.last_type === 'TK_END_EXPR' && (this.previous_flags.mode === this.MODE.ForInitializer || this.previous_flags.mode === this.MODE.Conditional))) {\n\n            this.set_mode(this.MODE.Statement);\n            this.indent();\n\n            if (this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, ['var', 'let', 'const']) && this.token_type === 'TK_WORD') {\n                this.flags.declaration_statement = true;\n            }\n\n            // If starting a new statement with [if, for, while, do], push to a new line.\n            // if (a) if (b) if(c) d(); else e(); else f();\n            this.allow_wrap_or_preserved_newline(this.token_type === 'TK_RESERVED' && this.in_array(this.token_text, ['do', 'for', 'if', 'while']));\n            this.output_wrapped = false;\n\n            return true;\n        }\n        return false;\n    }\n\n    private all_lines_start_with(lines: any, c: any): boolean {\n        for (let i: number = 0; i < lines.length; i++) {\n            let line: any = this.trim(lines[i]);\n            if (line.charAt(0) !== c) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private is_special_word(word: string): boolean {\n        return this.in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n    }\n\n    private in_array(what: any, arr: any): boolean {\n        for (let i: number = 0; i < arr.length; i += 1) {\n            if (arr[i] === what) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private unescape_string(s: string): string {\n        let esc: boolean = false;\n        let out: string = '';\n        let pos: number = 0;\n        let s_hex: string = '';\n        let escaped: number = 0;\n        let c: any;\n\n        while (esc || pos < s.length) {\n            c = s.charAt(pos);\n            pos++;\n\n            if (esc) {\n                esc = false;\n                if (c === 'x') {\n                    // simple hex-escape \\x24\n                    s_hex = s.substr(pos, 2);\n                    pos += 2;\n                } else if (c === 'u') {\n                    // unicode-escape, \\u2134\n                    s_hex = s.substr(pos, 4);\n                    pos += 4;\n                } else {\n                    // some common escape, e.g \\n\n                    out += '\\\\' + c;\n                    continue;\n                }\n                if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {\n                    // some weird escaping, bail out,\n                    // leaving whole string intact\n                    return s;\n                }\n\n                escaped = parseInt(s_hex, 16);\n\n                if (escaped >= 0x00 && escaped < 0x20) {\n                    // leave 0x00...0x1f escaped\n                    if (c === 'x') {\n                        out += '\\\\x' + s_hex;\n                    } else {\n                        out += '\\\\u' + s_hex;\n                    }\n                    continue;\n                }\n                else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                    // single-quote, apostrophe, backslash - escape these\n                    out += '\\\\' + String.fromCharCode(escaped);\n                }\n                else if (c === 'x' && escaped > 0x7e && escaped <= 0xff) {\n                    // we bail out on \\x7f..\\xff,\n                    // leaving whole string escaped,\n                    // as it's probably completely binary\n                    return s;\n                }\n                else {\n                    out += String.fromCharCode(escaped);\n                }\n            }\n            else if (c === '\\\\') {\n                esc = true;\n            }\n            else {\n                out += c;\n            }\n        }\n        return out;\n    }\n\n    private is_next(find: any): boolean {\n        let local_pos = this.parser_pos;\n        let c = this.input.charAt(local_pos);\n\n        while (this.in_array(c, this.whitespace) && c !== find) {\n            local_pos++;\n            if (local_pos >= this.input_length) {\n                return false;\n            }\n\n            c = this.input.charAt(local_pos);\n        }\n        return c === find;\n    }\n\n\n    private get_next_token(): any {\n        let i: any;\n        let resulting_string: any;\n\n        this.n_newlines = 0;\n\n        if (this.parser_pos >= this.input_length) {\n            return ['', 'TK_EOF'];\n        }\n\n        this.input_wanted_newline = false;\n        this.whitespace_before_token = [];\n\n        let c: any = this.input.charAt(this.parser_pos);\n        this.parser_pos += 1;\n\n        while (this.in_array(c, this.whitespace)) {\n            if (c === '\\n') {\n                this.n_newlines += 1;\n                this.whitespace_before_token = [];\n            }\n            else if (this.n_newlines) {\n                if (c === this.indent_string) {\n                    this.whitespace_before_token.push(this.indent_string);\n                } else if (c !== '\\r') {\n                    this.whitespace_before_token.push(' ');\n                }\n            }\n\n            if (this.parser_pos >= this.input_length) {\n                return ['', 'TK_EOF'];\n            }\n\n            c = this.input.charAt(this.parser_pos);\n            this.parser_pos += 1;\n        }\n\n        // NOTE: because beautifier doesn't fully parse, it doesn't use acorn.isIdentifierStart.\n        // It just treats all identifiers and numbers and such the same.\n        if (this.isIdentifierChar(this.input.charCodeAt(this.parser_pos - 1))) {\n            if (this.parser_pos < this.input_length) {\n                while (this.isIdentifierChar(this.input.charCodeAt(this.parser_pos))) {\n                    c += this.input.charAt(this.parser_pos);\n                    this.parser_pos += 1;\n\n                    if (this.parser_pos === this.input_length) {\n                        break;\n                    }\n                }\n            }\n\n            // small and surprisingly unugly hack for 1E-10 representation\n            if (this.parser_pos !== this.input_length && c.match(/^[0-9]+[Ee]$/) && (this.input.charAt(this.parser_pos) === '-' || this.input.charAt(this.parser_pos) === '+')) {\n                let sign: any = this.input.charAt(this.parser_pos);\n                this.parser_pos += 1;\n\n                let t: any = this.get_next_token();\n                c += sign + t[0];\n                return [c, 'TK_WORD'];\n            }\n\n            if (!(this.last_type === 'TK_DOT' ||\n                (this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, ['set', 'get'])))\n                && this.in_array(c, this.reserved_words)) {\n                if (c === 'in') { // hack for 'in' operator\n                    return [c, 'TK_OPERATOR'];\n                }\n                return [c, 'TK_RESERVED'];\n            }\n            return [c, 'TK_WORD'];\n        }\n\n        if (c === '(' || c === '[') {\n            return [c, 'TK_START_EXPR'];\n        }\n\n        if (c === ')' || c === ']') {\n            return [c, 'TK_END_EXPR'];\n        }\n\n        if (c === '{') {\n            return [c, 'TK_START_BLOCK'];\n        }\n\n        if (c === '}') {\n            return [c, 'TK_END_BLOCK'];\n        }\n\n        if (c === ';') {\n            return [c, 'TK_SEMICOLON'];\n        }\n\n        if (c === '/') {\n            let comment: string = '';\n\n            // peek for comment /* ... */\n            let inline_comment: boolean = true;\n            if (this.input.charAt(this.parser_pos) === '*') {\n                this.parser_pos += 1;\n                if (this.parser_pos < this.input_length) {\n                    while (this.parser_pos < this.input_length && !(this.input.charAt(this.parser_pos) === '*' && this.input.charAt(this.parser_pos + 1) && this.input.charAt(this.parser_pos + 1) === '/')) {\n                        c = this.input.charAt(this.parser_pos);\n                        comment += c;\n\n                        if (c === \"\\n\" || c === \"\\r\") {\n                            inline_comment = false;\n                        }\n\n                        this.parser_pos += 1;\n                        if (this.parser_pos >= this.input_length) {\n                            break;\n                        }\n                    }\n                }\n\n                this.parser_pos += 2;\n                if (inline_comment && this.n_newlines === 0) {\n                    return ['/*' + comment + '*/', 'TK_INLINE_COMMENT'];\n                } else {\n                    return ['/*' + comment + '*/', 'TK_BLOCK_COMMENT'];\n                }\n            }\n\n            // peek for comment // ...\n            if (this.input.charAt(this.parser_pos) === '/') {\n                comment = c;\n                while (this.input.charAt(this.parser_pos) !== '\\r' && this.input.charAt(this.parser_pos) !== '\\n') {\n                    comment += this.input.charAt(this.parser_pos);\n                    this.parser_pos += 1;\n\n                    if (this.parser_pos >= this.input_length) {\n                        break;\n                    }\n                }\n                return [comment, 'TK_COMMENT'];\n            }\n        }\n\n        if (c === '`' || c === \"'\" || c === '\"' || // string\n            (\n                (c === '/') || // regexp\n                (this.opt.e4x && c === \"<\" && this.input.slice(this.parser_pos - 1).match(/^<([-a-zA-Z:0-9_.]+|{[^{}]*}|!\\[CDATA\\[[\\s\\S]*?\\]\\])\\s*([-a-zA-Z:0-9_.]+=('[^']*'|\"[^\"]*\"|{[^{}]*})\\s*)*\\/?\\s*>/)) // xml\n            ) && ( // regex and xml can only appear in specific locations during parsing\n                (this.last_type === 'TK_RESERVED' && this.is_special_word(this.flags.last_text)) ||\n                (this.last_type === 'TK_END_EXPR' && this.in_array(this.previous_flags.mode, [this.MODE.Conditional, this.MODE.ForInitializer])) ||\n                (this.in_array(this.last_type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',\n                    'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'\n                ]))\n            )) {\n\n            let sep = c,\n                esc = false,\n                has_char_escapes = false;\n\n            resulting_string = c;\n\n            if (this.parser_pos < this.input_length) {\n                if (sep === '/') {\n                    //\n                    // handle regexp\n                    //\n                    let in_char_class: boolean = false;\n                    while (esc || in_char_class || this.input.charAt(this.parser_pos) !== sep) {\n                        resulting_string += this.input.charAt(this.parser_pos);\n                        if (!esc) {\n                            esc = this.input.charAt(this.parser_pos) === '\\\\';\n                            if (this.input.charAt(this.parser_pos) === '[') {\n                                in_char_class = true;\n                            }\n                            else if (this.input.charAt(this.parser_pos) === ']') {\n                                in_char_class = false;\n                            }\n                        }\n                        else {\n                            esc = false;\n                        }\n\n                        this.parser_pos += 1;\n                        if (this.parser_pos >= this.input_length) {\n                            // incomplete string/rexp when end-of-file reached.\n                            // bail out with what had been received so far.\n                            return [resulting_string, 'TK_STRING'];\n                        }\n                    }\n                }\n                else if (this.opt.e4x && sep === '<') {\n                    //\n                    // handle e4x xml literals\n                    //\n                    let xmlRegExp: RegExp = /<(\\/?)([-a-zA-Z:0-9_.]+|{[^{}]*}|!\\[CDATA\\[[\\s\\S]*?\\]\\])\\s*([-a-zA-Z:0-9_.]+=('[^']*'|\"[^\"]*\"|{[^{}]*})\\s*)*(\\/?)\\s*>/g;\n                    let xmlStr: any = this.input.slice(this.parser_pos - 1);\n                    let match: RegExpExecArray = xmlRegExp.exec(xmlStr);\n\n                    if (match && match.index === 0) {\n                        let rootTag: string = match[2];\n                        let depth: number = 0;\n\n                        while (match) {\n                            let isEndTag: boolean = !!match[1];\n                            let tagName: string = match[2];\n                            let isSingletonTag: boolean = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n\n                            if (tagName === rootTag && !isSingletonTag) {\n                                if (isEndTag) {\n                                    --depth;\n                                } else {\n                                    ++depth;\n                                }\n                            }\n                            if (depth <= 0) {\n                                break;\n                            }\n                            match = xmlRegExp.exec(xmlStr);\n                        }\n\n                        let xmlLength: any = match ? match.index + match[0].length : xmlStr.length;\n                        this.parser_pos += xmlLength - 1;\n                        return [xmlStr.slice(0, xmlLength), \"TK_STRING\"];\n                    }\n                }\n                else {\n                    //\n                    // handle string\n                    //\n                    while (esc || this.input.charAt(this.parser_pos) !== sep) {\n                        resulting_string += this.input.charAt(this.parser_pos);\n\n                        if (esc) {\n                            if (this.input.charAt(this.parser_pos) === 'x' || this.input.charAt(this.parser_pos) === 'u') {\n                                has_char_escapes = true;\n                            }\n                            esc = false;\n                        }\n                        else {\n                            esc = this.input.charAt(this.parser_pos) === '\\\\';\n                        }\n\n                        this.parser_pos += 1;\n                        if (this.parser_pos >= this.input_length) {\n                            // incomplete string/rexp when end-of-file reached.\n                            // bail out with what had been received so far.\n                            return [resulting_string, 'TK_STRING'];\n                        }\n                    }\n                }\n            }\n\n            this.parser_pos += 1;\n            resulting_string += sep;\n\n            if (has_char_escapes && this.opt.unescape_strings) {\n                resulting_string = this.unescape_string(resulting_string);\n            }\n\n            if (sep === '/') {\n                // regexps may have modifiers /regexp/MOD , so fetch those, too\n                while (this.parser_pos < this.input_length && this.in_array(this.input.charAt(this.parser_pos), this.wordchar)) {\n                    resulting_string += this.input.charAt(this.parser_pos);\n                    this.parser_pos += 1;\n                }\n            }\n            return [resulting_string, 'TK_STRING'];\n        }\n\n        if (c === '#') {\n            if (this.output_lines.length === 1 && this.output_lines[0].text.length === 0 &&\n                this.input.charAt(this.parser_pos) === '!') {\n                resulting_string = c;\n\n                while (this.parser_pos < this.input_length && c !== '\\n') {\n                    c = this.input.charAt(this.parser_pos);\n                    resulting_string += c;\n                    this.parser_pos += 1;\n                }\n\n                return [this.trim(resulting_string) + '\\n', 'TK_UNKNOWN'];\n            }\n\n            // Spidermonkey-specific sharp variables for circular references\n            // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n            // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n            let sharp: any = '#';\n            if (this.parser_pos < this.input_length && this.in_array(this.input.charAt(this.parser_pos), this.digits)) {\n                do {\n                    c = this.input.charAt(this.parser_pos);\n                    sharp += c;\n                    this.parser_pos += 1;\n                } while (this.parser_pos < this.input_length && c !== '#' && c !== '=');\n\n                if (c === '#') {\n                    //\n                }\n                else if (this.input.charAt(this.parser_pos) === '[' && this.input.charAt(this.parser_pos + 1) === ']') {\n                    sharp += '[]';\n                    this.parser_pos += 2;\n                }\n                else if (this.input.charAt(this.parser_pos) === '{' && this.input.charAt(this.parser_pos + 1) === '}') {\n                    sharp += '{}';\n                    this.parser_pos += 2;\n                }\n                return [sharp, 'TK_WORD'];\n            }\n        }\n\n        if (c === '<' && this.input.substring(this.parser_pos - 1, this.parser_pos + 3) === '<!--') {\n            this.parser_pos += 3;\n            c = '<!--';\n\n            while (this.input.charAt(this.parser_pos) !== '\\n' && this.parser_pos < this.input_length) {\n                c += this.input.charAt(this.parser_pos);\n                this.parser_pos++;\n            }\n\n            this.flags.in_html_comment = true;\n            return [c, 'TK_COMMENT'];\n        }\n\n        if (c === '-' && this.flags.in_html_comment && this.input.substring(this.parser_pos - 1, this.parser_pos + 2) === '-->') {\n            this.flags.in_html_comment = false;\n            this.parser_pos += 2;\n            return ['-->', 'TK_COMMENT'];\n        }\n\n        if (c === '.') {\n            return [c, 'TK_DOT'];\n        }\n\n        if (this.in_array(c, this.punct)) {\n            while (this.parser_pos < this.input_length && this.in_array(c + this.input.charAt(this.parser_pos), this.punct)) {\n                c += this.input.charAt(this.parser_pos);\n                this.parser_pos += 1;\n\n                if (this.parser_pos >= this.input_length) {\n                    break;\n                }\n            }\n\n            if (c === ',') {\n                return [c, 'TK_COMMA'];\n            }\n            else if (c === '=') {\n                return [c, 'TK_EQUALS'];\n            }\n            else {\n                return [c, 'TK_OPERATOR'];\n            }\n        }\n\n        return [c, 'TK_UNKNOWN'];\n    }\n\n    private handle_start_expr(): void {\n        if (this.start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        }\n\n        let next_mode: any = this.MODE.Expression;\n        if (this.token_text === '[') {\n\n            if (this.last_type === 'TK_WORD' || this.flags.last_text === ')') {\n                // this is array index specifier, break immediately\n                // a[x], fn()[x]\n                if (this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, this.line_starters)) {\n                    this.output_space_before_token = true;\n                }\n\n                this.set_mode(next_mode);\n                this.print_token(null);\n                this.indent();\n\n                if (this.opt.space_in_paren) {\n                    this.output_space_before_token = true;\n                }\n\n                return;\n            }\n\n            next_mode = this.MODE.ArrayLiteral;\n            if (this.is_array(this.flags.mode)) {\n                if (this.flags.last_text === '[' ||\n                    (this.flags.last_text === ',' && (this.last_last_text === ']' || this.last_last_text === '}'))) {\n                    // ], [ goes to new line\n                    // }, [ goes to new line\n                    if (!this.opt.keep_array_indentation) {\n                        this.print_newline(false, true);\n                    }\n                }\n            }\n        }\n        else {\n            if (this.last_type === 'TK_RESERVED' && this.flags.last_text === 'for') {\n                next_mode = this.MODE.ForInitializer;\n            }\n            else if (this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, ['if', 'while'])) {\n                next_mode = this.MODE.Conditional;\n            }\n            else {\n                // next_mode = MODE.Expression;\n            }\n        }\n\n        if (this.flags.last_text === ';' || this.last_type === 'TK_START_BLOCK') {\n            this.print_newline(false, true);\n        }\n        else if (this.last_type === 'TK_END_EXPR' || this.last_type === 'TK_START_EXPR' || this.last_type === 'TK_END_BLOCK' || this.flags.last_text === '.') {\n            // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n            this.allow_wrap_or_preserved_newline(this.input_wanted_newline);\n            this.output_wrapped = false;\n            // do nothing on (( and )( and ][ and ]( and .(\n        }\n        else if (!(this.last_type === 'TK_RESERVED' && this.token_text === '(') && this.last_type !== 'TK_WORD' && this.last_type !== 'TK_OPERATOR') {\n            this.output_space_before_token = true;\n        }\n        else if (this.last_type === 'TK_RESERVED' && (this.flags.last_word === 'function' || this.flags.last_word === 'typeof')) {\n            // function() vs function ()\n            if (this.opt.jslint_happy) {\n                this.output_space_before_token = true;\n            }\n        }\n        else if (this.last_type === 'TK_RESERVED' && (this.in_array(this.flags.last_text, this.line_starters) || this.flags.last_text === 'catch')) {\n            if (this.opt.space_before_conditional) {\n                this.output_space_before_token = true;\n            }\n        }\n\n        // Support of this kind of newline preservation.\n        // a = (b &&\n        //     (c || d));\n        if (this.token_text === '(') {\n            if (this.last_type === 'TK_EQUALS' || this.last_type === 'TK_OPERATOR') {\n                if (!this.start_of_object_property()) {\n                    this.allow_wrap_or_preserved_newline(undefined);\n                }\n            }\n        }\n\n        this.set_mode(next_mode);\n        this.print_token(null);\n\n        if (this.opt.space_in_paren) {\n            this.output_space_before_token = true;\n        }\n\n        // In all cases, if we newline while inside an expression it should be indented.\n        this.indent();\n    }\n\n    private handle_end_expr(): void {\n        // statements inside expressions are not valid syntax, but...\n        // statements must all be closed when their container closes\n        while (this.flags.mode === this.MODE.Statement) {\n            this.restore_mode();\n        }\n\n        if (this.flags.multiline_frame) {\n            this.allow_wrap_or_preserved_newline(this.token_text === ']' && this.is_array(this.flags.mode) && !this.opt.keep_array_indentation);\n            this.output_wrapped = false;\n        }\n\n        if (this.opt.space_in_paren) {\n            if (this.last_type === 'TK_START_EXPR' && !this.opt.space_in_empty_paren) {\n                // () [] no inner space in empty parens like these, ever, ref #320\n                this.trim_output(undefined);\n                this.output_space_before_token = false;\n            }\n            else {\n                this.output_space_before_token = true;\n            }\n        }\n\n        if (this.token_text === ']' && this.opt.keep_array_indentation) {\n            this.print_token(null);\n            this.restore_mode();\n        }\n        else {\n            this.restore_mode();\n            this.print_token(null);\n        }\n        this.remove_redundant_indentation(this.previous_flags);\n\n        // do {} while () // no statement required after\n        if (this.flags.do_while && this.previous_flags.mode === this.MODE.Conditional) {\n            this.previous_flags.mode = this.MODE.Expression;\n            this.flags.do_block = false;\n            this.flags.do_while = false;\n\n        }\n    }\n\n    private handle_start_block(): void {\n        this.set_mode(this.MODE.BlockStatement);\n\n        let empty_braces: boolean = this.is_next('}');\n        let empty_anonymous_function: boolean = empty_braces && this.flags.last_word === 'function' && this.last_type === 'TK_END_EXPR';\n\n        if (this.opt.brace_style === \"expand\") {\n            if (this.last_type !== 'TK_OPERATOR' &&\n                (empty_anonymous_function ||\n                    this.last_type === 'TK_EQUALS' ||\n                    (this.last_type === 'TK_RESERVED' && this.is_special_word(this.flags.last_text) && this.flags.last_text !== 'else'))) {\n                this.output_space_before_token = true;\n            }\n            else {\n                this.print_newline(false, true);\n            }\n        }\n        else { // collapse\n            if (this.last_type !== 'TK_OPERATOR' && this.last_type !== 'TK_START_EXPR') {\n                if (this.last_type === 'TK_START_BLOCK') {\n                    this.print_newline(false, true);\n                }\n                else {\n                    this.output_space_before_token = true;\n                }\n            }\n            else {\n                // if TK_OPERATOR or TK_START_EXPR\n                if (this.is_array(this.previous_flags.mode) && this.flags.last_text === ',') {\n                    if (this.last_last_text === '}') {\n                        // }, { in array context\n                        this.output_space_before_token = true;\n                    }\n                    else {\n                        this.print_newline(false, true); // [a, b, c, {\n                    }\n                }\n            }\n        }\n\n        this.print_token(null);\n        this.indent();\n    }\n\n    private handle_end_block(): void {\n        // statements must all be closed when their container closes\n        while (this.flags.mode === this.MODE.Statement) {\n            this.restore_mode();\n        }\n\n        let empty_braces: boolean = this.last_type === 'TK_START_BLOCK';\n\n        if (this.opt.brace_style === \"expand\") {\n            if (!empty_braces) {\n                this.print_newline(false, true);\n            }\n        } else {\n            // skip {}\n            if (!empty_braces) {\n                if (this.is_array(this.flags.mode) && this.opt.keep_array_indentation) {\n                    // we REALLY need a newline here, but newliner would skip that\n                    this.opt.keep_array_indentation = false;\n                    this.print_newline(false, true);\n                    this.opt.keep_array_indentation = true;\n                }\n                else {\n                    this.print_newline(false, true);\n                }\n            }\n        }\n\n        this.restore_mode();\n        this.print_token(null);\n    }\n\n    private handle_word(): void {\n        if (this.start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n        }\n        else if (this.input_wanted_newline && !this.is_expression(this.flags.mode) &&\n            (this.last_type !== 'TK_OPERATOR' || (this.flags.last_text === '--' || this.flags.last_text === '++')) &&\n            this.last_type !== 'TK_EQUALS' &&\n            (this.opt.preserve_newlines || !(this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n            this.print_newline(false, true);\n        }\n\n        if (this.flags.do_block && !this.flags.do_while) {\n            if (this.token_type === 'TK_RESERVED' && this.token_text === 'while') {\n                // do {} ## while ()\n                this.output_space_before_token = true;\n                this.print_token(null);\n                this.output_space_before_token = true;\n                this.flags.do_while = true;\n                return;\n            }\n            else {\n                // do {} should always have while as the next word.\n                // if we don't see the expected while, recover\n                this.print_newline(false, true);\n                this.flags.do_block = false;\n            }\n        }\n\n        // if may be followed by else, or not\n        // Bare/inline ifs are tricky\n        // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n        if (this.flags.if_block) {\n            if (!this.flags.else_block && (this.token_type === 'TK_RESERVED' && this.token_text === 'else')) {\n                this.flags.else_block = true;\n            }\n            else {\n                while (this.flags.mode === this.MODE.Statement) {\n                    this.restore_mode();\n                }\n\n                this.flags.if_block = false;\n                this.flags.else_block = false;\n            }\n        }\n\n        if (this.token_type === 'TK_RESERVED' && (this.token_text === 'case' || (this.token_text === 'default' && this.flags.in_case_statement))) {\n            this.print_newline(false, true);\n\n            if (this.flags.case_body || this.opt.jslint_happy) {\n                // switch cases following one another\n                this.deindent();\n                this.flags.case_body = false;\n            }\n\n            this.print_token(null);\n            this.flags.in_case = true;\n            this.flags.in_case_statement = true;\n            return;\n        }\n\n        if (this.token_type === 'TK_RESERVED' && this.token_text === 'function') {\n            if (this.in_array(this.flags.last_text, ['}', ';']) || (this.just_added_newline() && !this.in_array(this.flags.last_text, ['{', ':', '=', ',']))) {\n                // make sure there is a nice clean space of at least one blank line\n                // before a new function definition\n                if (!this.just_added_blankline() && !this.flags.had_comment) {\n                    this.print_newline(false, true);\n                    this.print_newline(true, true);\n                }\n            }\n            if (this.last_type === 'TK_RESERVED' || this.last_type === 'TK_WORD') {\n                if (this.last_type === 'TK_RESERVED' && this.in_array(this.flags.last_text, ['get', 'set', 'new', 'return'])) {\n                    this.output_space_before_token = true;\n                }\n                else {\n                    this.print_newline(false, true);\n                }\n            }\n            else if (this.last_type === 'TK_OPERATOR' || this.flags.last_text === '=') {\n                // foo = function\n                this.output_space_before_token = true;\n            }\n            else if (this.is_expression(this.flags.mode)) {\n                // (function\n            } else {\n                this.print_newline(false, true);\n            }\n        }\n\n        if (this.last_type === 'TK_COMMA' || this.last_type === 'TK_START_EXPR' || this.last_type === 'TK_EQUALS' || this.last_type === 'TK_OPERATOR') {\n            if (!this.start_of_object_property()) {\n                this.allow_wrap_or_preserved_newline(undefined);\n            }\n        }\n\n        if (this.token_type === 'TK_RESERVED' && this.token_text === 'function') {\n            this.print_token(null);\n            this.flags.last_word = this.token_text;\n            return;\n        }\n\n        this.prefix = 'NONE';\n\n        if (this.last_type === 'TK_END_BLOCK') {\n            if (!(this.token_type === 'TK_RESERVED' && this.in_array(this.token_text, ['else', 'catch', 'finally']))) {\n                this.prefix = 'NEWLINE';\n            }\n            else {\n                if (this.opt.brace_style === \"expand\" || this.opt.brace_style === \"end-expand\") {\n                    this.prefix = 'NEWLINE';\n                }\n                else {\n                    this.prefix = 'SPACE';\n                    this.output_space_before_token = true;\n                }\n            }\n        }\n        else if (this.last_type === 'TK_SEMICOLON' && this.flags.mode === this.MODE.BlockStatement) {\n            // TODO: Should this be for STATEMENT as well?\n            this.prefix = 'NEWLINE';\n        }\n        else if (this.last_type === 'TK_SEMICOLON' && this.is_expression(this.flags.mode)) {\n            this.prefix = 'SPACE';\n        }\n        else if (this.last_type === 'TK_STRING') {\n            this.prefix = 'NEWLINE';\n        }\n        else if (this.last_type === 'TK_RESERVED' || this.last_type === 'TK_WORD') {\n            this.prefix = 'SPACE';\n        }\n        else if (this.last_type === 'TK_START_BLOCK') {\n            this.prefix = 'NEWLINE';\n        }\n        else if (this.last_type === 'TK_END_EXPR') {\n            this.output_space_before_token = true;\n            this.prefix = 'NEWLINE';\n        }\n\n        if (this.token_type === 'TK_RESERVED' && this.in_array(this.token_text, this.line_starters) && this.flags.last_text !== ')') {\n            if (this.flags.last_text === 'else') {\n                this.prefix = 'SPACE';\n            }\n            else {\n                this.prefix = 'NEWLINE';\n            }\n        }\n\n        if (this.token_type === 'TK_RESERVED' && this.in_array(this.token_text, ['else', 'catch', 'finally'])) {\n            if (this.last_type !== 'TK_END_BLOCK' || this.opt.brace_style === \"expand\" || this.opt.brace_style === \"end-expand\") {\n                this.print_newline(false, true);\n            }\n            else {\n                this.trim_output(true);\n                let line: any = this.output_lines[this.output_lines.length - 1];\n\n                // If we trimmed and there's something other than a close block before us\n                // put a newline back in.  Handles '} // comment' scenario.\n                if (line.text[line.text.length - 1] !== '}') {\n                    this.print_newline(false, true);\n                }\n\n                this.output_space_before_token = true;\n            }\n        }\n        else if (this.prefix === 'NEWLINE') {\n            if (this.last_type === 'TK_RESERVED' && this.is_special_word(this.flags.last_text)) {\n                // no newline between 'return nnn'\n                this.output_space_before_token = true;\n            }\n            else if (this.last_type !== 'TK_END_EXPR') {\n                if ((this.last_type !== 'TK_START_EXPR' || !(this.token_type === 'TK_RESERVED' && this.in_array(this.token_text, ['var', 'let', 'const']))) && this.flags.last_text !== ':') {\n                    // no need to force newline on 'var': for (var x = 0...)\n                    if (this.token_type === 'TK_RESERVED' && this.token_text === 'if' && this.flags.last_word === 'else' && this.flags.last_text !== '{') {\n                        // no newline for } else if {\n                        this.output_space_before_token = true;\n                    }\n                    else {\n                        this.print_newline(false, true);\n                    }\n                }\n            }\n            else if (this.token_type === 'TK_RESERVED' && this.in_array(this.token_text, this.line_starters) && this.flags.last_text !== ')') {\n                this.print_newline(false, true);\n            }\n        }\n        else if (this.is_array(this.flags.mode) && this.flags.last_text === ',' && this.last_last_text === '}') {\n            this.print_newline(false, true); // }, in lists get a newline treatment\n        }\n        else if (this.prefix === 'SPACE') {\n            this.output_space_before_token = true;\n        }\n\n        this.print_token(null);\n        this.flags.last_word = this.token_text;\n\n        if (this.token_type === 'TK_RESERVED' && this.token_text === 'do') {\n            this.flags.do_block = true;\n        }\n\n        if (this.token_type === 'TK_RESERVED' && this.token_text === 'if') {\n            this.flags.if_block = true;\n        }\n    }\n\n    private handle_semicolon(): void {\n        if (this.start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            // Semicolon can be the start (and end) of a statement\n            this.output_space_before_token = false;\n        }\n\n        while (this.flags.mode === this.MODE.Statement && !this.flags.if_block && !this.flags.do_block) {\n            this.restore_mode();\n        }\n\n        this.print_token(null);\n\n        if (this.flags.mode === this.MODE.ObjectLiteral) {\n            // if we're in OBJECT mode and see a semicolon, its invalid syntax\n            // recover back to treating this as a BLOCK\n            this.flags.mode = this.MODE.BlockStatement;\n        }\n    }\n\n    private handle_string(): void {\n        if (this.start_of_statement()) {\n            // The conditional starts the statement if appropriate.\n            // One difference - strings want at least a space before\n            this.output_space_before_token = true;\n        }\n        else if (this.last_type === 'TK_RESERVED' || this.last_type === 'TK_WORD') {\n            this.output_space_before_token = true;\n        }\n        else if (this.last_type === 'TK_COMMA' || this.last_type === 'TK_START_EXPR' || this.last_type === 'TK_EQUALS' || this.last_type === 'TK_OPERATOR') {\n            if (!this.start_of_object_property()) {\n                this.allow_wrap_or_preserved_newline(undefined);\n            }\n        }\n        else {\n            this.print_newline(false, true);\n        }\n\n        this.print_token(null);\n    }\n\n    private handle_equals(): void {\n        if (this.flags.declaration_statement) {\n            // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n            this.flags.declaration_assignment = true;\n        }\n\n        this.output_space_before_token = true;\n        this.print_token(null);\n        this.output_space_before_token = true;\n    }\n\n    private handle_comma(): void {\n        if (this.flags.declaration_statement) {\n            if (this.is_expression(this.flags.parent.mode)) {\n                // do not break on comma, for(var a = 1, b = 2)\n                this.flags.declaration_assignment = false;\n            }\n\n            this.print_token(null);\n\n            if (this.flags.declaration_assignment) {\n                this.flags.declaration_assignment = false;\n                this.print_newline(false, true);\n            }\n            else {\n                this.output_space_before_token = true;\n            }\n\n            return;\n        }\n\n        if (this.last_type === 'TK_END_BLOCK' && this.flags.mode !== this.MODE.Expression) {\n            this.print_token(null);\n\n            if (this.flags.mode === this.MODE.ObjectLiteral && this.flags.last_text === '}') {\n                this.print_newline(false, true);\n            }\n            else {\n                this.output_space_before_token = true;\n            }\n        }\n        else {\n            if (this.flags.mode === this.MODE.ObjectLiteral) {\n                this.print_token(null);\n                this.print_newline(false, true);\n            }\n            else {\n                // EXPR or DO_BLOCK\n                this.print_token(null);\n                this.output_space_before_token = true;\n            }\n        }\n    }\n\n    private handle_operator(): void {\n        let space_before: boolean = true;\n        let space_after: boolean = true;\n\n        if (this.last_type === 'TK_RESERVED' && this.is_special_word(this.flags.last_text)) {\n            // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n            this.output_space_before_token = true;\n            this.print_token(null);\n            return;\n        }\n\n        // hack for actionscript's import .*;\n        if (this.token_text === '*' && this.last_type === 'TK_DOT' && !this.last_last_text.match(/^\\d+$/)) {\n            this.print_token(null);\n            return;\n        }\n\n        if (this.token_text === ':' && this.flags.in_case) {\n            this.flags.case_body = true;\n            this.indent();\n            this.print_token(null);\n            this.print_newline(false, true);\n            this.flags.in_case = false;\n            return;\n        }\n\n        if (this.token_text === '::') {\n            // no spaces around exotic namespacing syntax operator\n            this.print_token(null);\n            return;\n        }\n\n        // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n        // if there is a newline between -- or ++ and anything else we should preserve it.\n        if (this.input_wanted_newline && (this.token_text === '--' || this.token_text === '++')) {\n            this.print_newline(false, true);\n        }\n\n        // Allow line wrapping between operators\n        if (this.last_type === 'TK_OPERATOR') {\n            this.allow_wrap_or_preserved_newline(undefined);\n        }\n\n        if (this.in_array(this.token_text, ['--', '++', '!']) || (this.in_array(this.token_text, ['-', '+']) && (this.in_array(this.last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) || this.in_array(this.flags.last_text, this.line_starters) || this.flags.last_text === ','))) {\n            // unary operators (and binary +/- pretending to be unary) special cases\n            space_before = false;\n            space_after = false;\n\n            if (this.flags.last_text === ';' && this.is_expression(this.flags.mode)) {\n                // for (;; ++i)\n                //        ^^^\n                space_before = true;\n            }\n\n            if (this.last_type === 'TK_RESERVED') {\n                space_before = true;\n            }\n\n            if ((this.flags.mode === this.MODE.BlockStatement || this.flags.mode === this.MODE.Statement) && (this.flags.last_text === '{' || this.flags.last_text === ';')) {\n                // { foo; --i }\n                // foo(); --bar;\n                this.print_newline(false, true);\n            }\n        }\n        else if (this.token_text === ':') {\n            if (this.flags.ternary_depth === 0) {\n                if (this.flags.mode === this.MODE.BlockStatement) {\n                    this.flags.mode = this.MODE.ObjectLiteral;\n                }\n                space_before = false;\n            }\n            else {\n                this.flags.ternary_depth -= 1;\n            }\n        }\n        else if (this.token_text === '?') {\n            this.flags.ternary_depth += 1;\n        }\n\n        this.output_space_before_token = this.output_space_before_token || space_before;\n        this.print_token(null);\n        this.output_space_before_token = space_after;\n    }\n\n    private handle_block_comment(): void {\n        let lines: any = this.split_newlines(this.token_text);\n        let j: number; // iterator for this case\n        let javadoc: boolean = false;\n\n        // block comment starts with a new line\n        this.print_newline(false, true);\n\n        if (lines.length > 1) {\n            if (this.all_lines_start_with(lines.slice(1), '*')) {\n                javadoc = true;\n            }\n        }\n\n        // first line always indented\n        this.print_token(lines[0]);\n        for (j = 1; j < lines.length; j++) {\n            this.print_newline(false, true);\n\n            if (javadoc) {\n                // javadoc: reformat and re-indent\n                this.print_token(' ' + this.trim(lines[j]));\n            }\n            else {\n                // normal comments output raw\n                this.output_lines[this.output_lines.length - 1].text.push(lines[j]);\n            }\n        }\n\n        // for comments of more than one line, make sure there's a new line after\n        this.print_newline(false, true);\n    }\n\n    private handle_inline_comment(): void {\n        this.output_space_before_token = true;\n        this.print_token(null);\n        this.output_space_before_token = true;\n    }\n\n    private handle_comment(): void {\n        if (this.input_wanted_newline) {\n            this.print_newline(false, true);\n        }\n        else {\n            this.trim_output(true);\n        }\n\n        this.output_space_before_token = true;\n        this.print_token(null);\n        this.print_newline(false, true);\n    }\n\n    private handle_dot(): void {\n        if (this.last_type === 'TK_RESERVED' && this.is_special_word(this.flags.last_text)) {\n            this.output_space_before_token = true;\n        }\n        else {\n            // allow preserved newlines before dots in general\n            // force newlines on dots after close paren when break_chained - for bar().baz()\n            this.allow_wrap_or_preserved_newline(this.flags.last_text === ')' && this.opt.break_chained_methods);\n        }\n\n        this.print_token(null);\n    }\n\n    private handle_unknown(): void {\n        this.print_token(null);\n\n        if (this.token_text[this.token_text.length - 1] === '\\n') {\n            this.print_newline(false, true);\n        }\n    }\n\n    private beautify(): string {\n        /*jshint onevar:true */\n        let t: any;\n        let i: number;\n        let keep_whitespace: any;\n        let sweet_code: string;\n\n        while (true) {\n            t = this.get_next_token();\n            this.token_text = t[0];\n            this.token_type = t[1];\n\n            if (this.token_type === 'TK_EOF') {\n                // Unwind any open statements\n                while (this.flags.mode === this.MODE.Statement) {\n                    this.restore_mode();\n                }\n                break;\n            }\n\n            keep_whitespace = this.opt.keep_array_indentation && this.is_array(this.flags.mode);\n            this.input_wanted_newline = this.n_newlines > 0;\n\n            if (keep_whitespace) {\n                for (i = 0; i < this.n_newlines; i += 1) {\n                    this.print_newline(i > 0, true);\n                }\n            }\n            else {\n                if (this.opt.max_preserve_newlines && this.n_newlines > this.opt.max_preserve_newlines) {\n                    this.n_newlines = this.opt.max_preserve_newlines;\n                }\n\n                if (this.opt.preserve_newlines) {\n                    if (this.n_newlines > 1) {\n                        this.print_newline(false, true);\n\n                        for (i = 1; i < this.n_newlines; i += 1) {\n                            this.print_newline(false, true);\n                        }\n                    }\n                }\n            }\n\n            //this.handlers[this.token_type]();\n            switch (this.token_type) {\n                case 'TK_START_EXPR':\n                    this.handle_start_expr();\n                    break;\n                case 'TK_END_EXPR':\n                    this.handle_end_expr();\n                    break;\n                case 'TK_START_BLOCK':\n                    this.handle_start_block();\n                    break;\n                case 'TK_END_BLOCK':\n                    this.handle_end_block();\n                    break;\n                case 'TK_WORD': \n                    this.handle_word();\n                    break;\n                case 'TK_RESERVED': \n                    this.handle_word();\n                    break;\n                case 'TK_SEMICOLON': \n                    this.handle_semicolon();\n                    break;\n                case 'TK_STRING': \n                    this.handle_string();\n                    break;\n                case 'TK_EQUALS': \n                    this.handle_equals();\n                    break;\n                case 'TK_OPERATOR': \n                    this.handle_operator();\n                    break;\n                case 'TK_COMMA': \n                    this.handle_comma();\n                    break;\n                case 'TK_BLOCK_COMMENT': \n                    this.handle_block_comment();\n                    break;\n                case 'TK_INLINE_COMMENT': \n                    this.handle_inline_comment();\n                    break;\n                case 'TK_COMMENT': \n                    this.handle_comment();\n                    break;\n                case 'TK_DOT': \n                    this.handle_dot();\n                    break;\n                case 'TK_UNKNOWN': \n                    this.handle_unknown();\n                    break;\n            }\n\n            // The cleanest handling of inline comments is to treat them as though they aren't there.\n            // Just continue formatting and the behavior should be logical.\n            // Also ignore unknown tokens.  Again, this should result in better behavior.\n            if (this.token_type !== 'TK_INLINE_COMMENT' && this.token_type !== 'TK_COMMENT' &&\n                this.token_type !== 'TK_BLOCK_COMMENT' && this.token_type !== 'TK_UNKNOWN') {\n                this.last_last_text = this.flags.last_text;\n                this.last_type = this.token_type;\n                this.flags.last_text = this.token_text;\n            }\n\n            this.flags.had_comment = (this.token_type === 'TK_INLINE_COMMENT' || this.token_type === 'TK_COMMENT' || this.token_type === 'TK_BLOCK_COMMENT');\n        }\n\n        sweet_code = this.output_lines[0].text.join('');\n        for (let line_index: number = 1; line_index < this.output_lines.length; line_index++) {\n            sweet_code += '\\n' + this.output_lines[line_index].text.join('');\n        }\n\n        sweet_code = sweet_code.replace(/[\\r\\n ]+$/, '');\n        return sweet_code;\n    }\n\n    public js_beautify(js_source_text: string, options: any): string {\n        this.whitespace = \"\\n\\r\\t \".split('');\n        this.wordchar = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$'.split('');\n        this.digits = '0123456789'.split('');\n\n        this.punct = '+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! , : ? ^ ^= |= :: =>';\n        this.punct += ' <%= <% %> <?= <? ?>'; // try to be a good boy and try not to break the markup language identifiers\n        this.punct = this.punct.split(' ');\n\n        // words which should always start on new line.\n        this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function'.split(',');\n        this.reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof']);\n\n        // Some interpreters have unexpected results with foo = baz || bar;\n        options = options ? options : {};\n        this.opt = {};\n\n        // compatibility\n        if (options.space_after_anon_function !== undefined && options.jslint_happy === undefined) {\n            options.jslint_happy = options.space_after_anon_function;\n        }\n\n        if (options.braces_on_own_line !== undefined) {\n            // graceful handling of deprecated option\n            this.opt.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n        }\n\n        this.opt.brace_style = options.brace_style ? options.brace_style : (this.opt.brace_style ? this.opt.brace_style : \"collapse\");\n\n        // graceful handling of deprecated option\n        if (this.opt.brace_style === \"expand-strict\") {\n            this.opt.brace_style = \"expand\";\n        }\n\n        this.opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n        this.opt.indent_char = options.indent_char ? options.indent_char : ' ';\n        this.opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n        this.opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n        this.opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n        this.opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n        this.opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n        this.opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n        this.opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n        this.opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n        this.opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n        this.opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n        this.opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n\n        if (options.indent_with_tabs) {\n            this.opt.indent_char = '\\t';\n            this.opt.indent_size = 1;\n        }\n\n        this.indent_string = '';\n        while (this.opt.indent_size > 0) {\n            this.indent_string += this.opt.indent_char;\n            this.opt.indent_size -= 1;\n        }\n\n        while (js_source_text && (js_source_text.charAt(0) === ' ' || js_source_text.charAt(0) === '\\t')) {\n            this.preindent_string += js_source_text.charAt(0);\n            js_source_text = js_source_text.substring(1);\n        }\n\n        this.input = js_source_text;\n\n        // cache the source's length.\n        this.input_length = js_source_text.length;\n\n        this.last_type = 'TK_START_BLOCK'; // last token type\n        this.last_last_text = ''; // pre-last token text\n        this.output_lines = [this.create_output_line()];\n        this.output_wrapped = false;\n        this.output_space_before_token = false;\n        this.whitespace_before_token = [];\n\n        // Stack of parsing/formatting states, including MODE.\n        // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n        // and formatted output.  This makes the beautifier less accurate than full parsers\n        // but also far more tolerant of syntax errors.\n        //\n        // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n        // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n        // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n        // most full parsers would die, but the beautifier gracefully falls back to\n        // MODE.BlockStatement and continues on.\n        this.flag_store = [];\n        this.set_mode(this.MODE.BlockStatement);\n\n        this.parser_pos = 0;\n\n        return this.beautify();\n    }\n}"],"sourceRoot":"../../../src"}