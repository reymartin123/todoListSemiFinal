{"version":3,"sources":["propertyFields/dateTimePicker/IPropertyFieldDateTimePicker.ts"],"names":[],"mappings":";;AAaA;;IAEI;AACJ,IAAY,cAYX;AAZD,WAAY,cAAc;IAExB;;;OAGG;IACH,yDAAW,CAAA;IACX;;;OAGG;IACH,yDAAO,CAAA;AACT,CAAC,EAZW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAYzB;AAED;;IAEI;AACJ,IAAY,cAIX;AAJD,WAAY,cAAc;IAExB,2DAAY,CAAA;IACZ,mDAAI,CAAA;AACN,CAAC,EAJW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAIzB","file":"propertyFields/dateTimePicker/IPropertyFieldDateTimePicker.js","sourcesContent":["import { DayOfWeek } from 'office-ui-fabric-react/lib/utilities/dateValues/DateValues';\nimport { IPropertyPaneCustomFieldProps } from '@microsoft/sp-webpart-base';\n\n/**\n * Date field value interface\n *\n */\nexport interface IDateTimeFieldValue {\n\n  value: Date;\n  displayValue: string;\n}\n\n/**\n  * Time convention\n  */\nexport enum TimeConvention {\n\n  /**\n   * The 12-hour clock is a time convention in which the 24 hours of the day are\n   * divided into two periods: a.m. and p.m.\n   */\n  Hours12 = 1,\n  /**\n   * The 24-hour clock is the convention of time keeping in which the day runs from midnight to\n   * midnight and is divided into 24 hours, indicated by the hours passed since midnight, from 0 to 23\n   */\n  Hours24\n}\n\n/**\n  * Time convention\n  */\nexport enum DateConvention {\n\n  DateTime = 1,\n  Date\n}\n\n/**\n * Public properties of the PropertyFieldDateTimePicker custom field\n *\n */\nexport interface IPropertyFieldDateTimePickerProps {\n\n  /**\n   * Property field label displayed on top\n   */\n  label: string;\n  /**\n   * Specify if the control needs to be disabled\n   */\n  disabled?: boolean;\n  /**\n   * Initial date of the control\n   */\n  initialDate?: IDateTimeFieldValue;\n  /**\n   * Defines a formatDate function to display the date of the custom Field.\n   * By defaut date.toDateString() is used.\n   */\n  formatDate?: (date: Date) => string;\n  /**\n   * Defines the date convention to use. The default is date and time.\n   */\n  dateConvention?: DateConvention;\n  /**\n   * Defines the time convention to use. The default value is the 24-hour clock convention.\n   */\n  timeConvention?: TimeConvention;\n  /**\n   * Specify the first day of the week for your locale.\n   */\n  firstDayOfWeek?: DayOfWeek;\n  /**\n   * Defines a onPropertyChange function to raise when the selected date changed.\n   * Normally this function must be always defined with the 'this.onPropertyChange'\n   * method of the web part object.\n   */\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\n  /**\n   * Parent Web Part properties\n   */\n  properties: any;\n  /**\n   * An UNIQUE key indicates the identity of this control\n   */\n  key?: string;\n  /**\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\n   *\n   *   When it returns string:\n   *   - If valid, it returns empty string.\n   *   - If invalid, it returns the error message string and the text field will\n   *     show a red border and show an error message below the text field.\n   *\n   *   When it returns Promise<string>:\n   *   - The resolved value is display as error message.\n   *   - The rejected, the value is thrown away.\n   *\n   */\n  onGetErrorMessage?: (value: string) => string | Promise<string>;\n  /**\n   * Custom Field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\n   * Default value is 200.\n   */\n  deferredValidationTime?: number;\n\n  /**\n   * Specify if labels in front of date and time parts should be rendered. True by default\n   */\n  showLabels?: boolean;\n}\n\n/**\n * Private properties of the PropertyFieldDateTimePicker custom field.\n * We separate public & private properties to include onRender & onDispose method waited\n * by the PropertyFieldCustom, witout asking to the developer to add it when he's using\n * the PropertyFieldDateTimePicker.\n *\n */\nexport interface IPropertyFieldDateTimePickerPropsInternal extends IPropertyFieldDateTimePickerProps {\n\n  targetProperty: string;\n  onRender(elem: HTMLElement): void;\n  onDispose(elem: HTMLElement): void;\n}\n"],"sourceRoot":"../../../src"}