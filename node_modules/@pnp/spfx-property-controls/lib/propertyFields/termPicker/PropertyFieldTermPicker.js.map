{"version":3,"sources":["propertyFields/termPicker/PropertyFieldTermPicker.ts"],"names":[],"mappings":"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","file":"propertyFields/termPicker/PropertyFieldTermPicker.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport {\n  IPropertyPaneField,\n  PropertyPaneFieldType,\n  IWebPartContext\n} from '@microsoft/sp-webpart-base';\nimport PropertyFieldTermPickerHost from './PropertyFieldTermPickerHost';\nimport { IPropertyFieldTermPickerHostProps } from './IPropertyFieldTermPickerHost';\nimport { IPropertyFieldTermPickerPropsInternal, IPropertyFieldTermPickerProps, IPickerTerms } from './IPropertyFieldTermPicker';\nimport { ISPTermStorePickerService } from '../../services/ISPTermStorePickerService';\nimport SPTermStorePickerService from '../../services/SPTermStorePickerService';\n\n/**\n * Represents a PropertyFieldTermPicker object.\n * NOTE: INTERNAL USE ONLY\n * @internal\n */\nexport class PropertyFieldTermPickerBuilder implements IPropertyPaneField<IPropertyFieldTermPickerPropsInternal> {\n  // Properties defined by IPropertyPaneField\n  public type: PropertyPaneFieldType = PropertyPaneFieldType.Custom;\n  public targetProperty: string;\n  public properties: IPropertyFieldTermPickerPropsInternal;\n\n  // Custom properties label: string;\n  private label: string;\n  private context: IWebPartContext;\n  private allowMultipleSelections: boolean = false;\n  private initialValues: IPickerTerms = [];\n  private excludeSystemGroup: boolean = false;\n  private limitByGroupNameOrID: string = null;\n  private limitByTermsetNameOrID: string = null;\n  private panelTitle: string;\n  private hideTermStoreName: boolean;\n  private isTermSetSelectable: boolean;\n  private disabledTermIds: string[];\n  private termService: ISPTermStorePickerService;\n\n  public onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void { }\n  private customProperties: any;\n  private key: string;\n  private disabled: boolean = false;\n  private onGetErrorMessage: (value: IPickerTerms) => string | Promise<string>;\n  private deferredValidationTime: number = 200;\n\n  /**\n   * Constructor method\n   */\n  public constructor(_targetProperty: string, _properties: IPropertyFieldTermPickerPropsInternal) {\n    this.render = this.render.bind(this);\n    this.targetProperty = _targetProperty;\n    this.properties = _properties;\n    this.properties.onDispose = this.dispose;\n    this.properties.onRender = this.render;\n    this.label = _properties.label;\n    this.context = _properties.context;\n    this.onPropertyChange = _properties.onPropertyChange;\n    this.customProperties = _properties.properties;\n    this.key = _properties.key;\n    this.onGetErrorMessage = _properties.onGetErrorMessage;\n    this.panelTitle = _properties.panelTitle;\n    this.limitByGroupNameOrID = _properties.limitByGroupNameOrID;\n    this.limitByTermsetNameOrID = _properties.limitByTermsetNameOrID;\n    this.hideTermStoreName = _properties.hideTermStoreName;\n    this.isTermSetSelectable = _properties.isTermSetSelectable;\n    this.disabledTermIds = _properties.disabledTermIds;\n    this.termService = _properties.termService;\n\n    if (_properties.disabled === true) {\n      this.disabled = _properties.disabled;\n    }\n    if (_properties.deferredValidationTime) {\n      this.deferredValidationTime = _properties.deferredValidationTime;\n    }\n    if (typeof _properties.allowMultipleSelections !== 'undefined') {\n      this.allowMultipleSelections = _properties.allowMultipleSelections;\n    }\n    if (typeof _properties.initialValues !== 'undefined') {\n      this.initialValues = _properties.initialValues;\n    }\n    if (typeof _properties.excludeSystemGroup !== 'undefined') {\n      this.excludeSystemGroup = _properties.excludeSystemGroup;\n    }\n  }\n\n  /**\n   * Renders the SPListPicker field content\n   */\n  private render(elem: HTMLElement, ctx?: any, changeCallback?: (targetProperty?: string, newValue?: any) => void): void {\n    // Construct the JSX properties\n    const element: React.ReactElement<IPropertyFieldTermPickerHostProps> = React.createElement(PropertyFieldTermPickerHost, {\n      label: this.label,\n      targetProperty: this.targetProperty,\n      panelTitle: this.panelTitle,\n      allowMultipleSelections: this.allowMultipleSelections,\n      initialValues: this.initialValues,\n      excludeSystemGroup: this.excludeSystemGroup,\n      limitByGroupNameOrID: this.limitByGroupNameOrID,\n      limitByTermsetNameOrID: this.limitByTermsetNameOrID,\n      hideTermStoreName: this.hideTermStoreName,\n      isTermSetSelectable: this.isTermSetSelectable,\n      disabledTermIds: this.disabledTermIds,\n      context: this.context,\n      onDispose: this.dispose,\n      onRender: this.render,\n      onChange: changeCallback,\n      onPropertyChange: this.onPropertyChange,\n      properties: this.customProperties,\n      key: this.key,\n      disabled: this.disabled,\n      onGetErrorMessage: this.onGetErrorMessage,\n      deferredValidationTime: this.deferredValidationTime,\n      termService: this.termService\n    });\n\n    // Calls the REACT content generator\n    ReactDom.render(element, elem);\n  }\n\n  /**\n   * Disposes the current object\n   */\n  private dispose(elem: HTMLElement): void {\n\n  }\n\n}\n\n/**\n * Helper method to create a SPList Picker on the PropertyPane.\n * @param targetProperty - Target property the SharePoint list picker is associated to.\n * @param properties - Strongly typed SPList Picker properties.\n */\nexport function PropertyFieldTermPicker(targetProperty: string, properties: IPropertyFieldTermPickerProps): IPropertyPaneField<IPropertyFieldTermPickerPropsInternal> {\n  // Calls the PropertyFieldTermPicker builder object\n  // This object will simulate a PropertyFieldCustom to manage his rendering process\n  return new PropertyFieldTermPickerBuilder(targetProperty, {\n    ...properties,\n    targetProperty: targetProperty,\n    onRender: null,\n    onDispose: null,\n    termService: new SPTermStorePickerService(properties, properties.context)\n  });\n}\n"],"sourceRoot":"../../../src"}