{"version":3,"sources":["propertyFields/termPicker/TermGroup.tsx"],"names":[],"mappings":"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","file":"propertyFields/termPicker/TermGroup.js","sourcesContent":["import * as React from 'react';\nimport { ITermGroupProps, ITermGroupState } from './IPropertyFieldTermPickerHost';\nimport { GROUP_IMG, EXPANDED_IMG, COLLAPSED_IMG } from './PropertyFieldTermPickerHost';\nimport TermSet from './TermSet';\n\nimport styles from './PropertyFieldTermPickerHost.module.scss';\nimport * as strings from 'PropertyControlStrings';\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\n\n/**\n * Term group component\n */\nexport default class TermGroup extends React.Component<ITermGroupProps, ITermGroupState> {\n  constructor(props: ITermGroupProps) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n      loaded: !!(props.group.TermSets && props.group.TermSets._Child_Items_)\n    };\n\n    // Check if the term group has to be automatically opened\n    const selectedTermsInGroup = this.props.activeNodes.filter(node => node.termGroup === this.props.group.Id);\n    if (selectedTermsInGroup.length > 0) {\n      this._loadTermSets(true);\n    }\n\n    this._handleClick = this._handleClick.bind(this);\n    this._autoExpand = this._autoExpand.bind(this);\n  }\n\n  /**\n   * Handle the click event: collapse or expand\n   */\n  private _handleClick() {\n    const isExpanded: boolean = this.state.expanded; // current state\n\n    this.setState({\n      expanded: !isExpanded\n    });\n\n    if (!isExpanded) {\n      this._loadTermSets();\n    }\n  }\n\n  /**\n   * Function to auto expand the termset\n   */\n  private _autoExpand() {\n    this.setState({\n      expanded: true\n    });\n  }\n\n  private async _loadTermSets(autoExpand?: boolean): Promise<void> {\n    if (this.state.loaded) {\n      return;\n    }\n\n    const termSets = await this.props.termsService.getGroupTermSets(this.props.group);\n\n    //\n    // NOTE: the next line is kinda incorrect from React perspective as we're modifying props.\n    // But it is done to avoid redux usage or reimplementing the whole logic\n    // \n    this.props.group.TermSets = termSets;\n    this.setState({\n      loaded: true,\n      expanded: typeof autoExpand !== 'undefined' ? autoExpand : this.state.expanded\n    });\n  }\n\n  public render(): JSX.Element {\n    // Specify the inline styling to show or hide the termsets\n    const styleProps: React.CSSProperties = {\n      display: this.state.expanded ? 'block' : 'none'\n    };\n\n    return (\n      <div>\n        <div className={`${styles.listItem}`} onClick={this._handleClick}>\n          <img src={this.state.expanded ? EXPANDED_IMG : COLLAPSED_IMG} alt={strings.TermPickerExpandNode} title={strings.TermPickerExpandNode} />\n          <img src={GROUP_IMG} title={strings.TermPickerMenuGroup} alt={strings.TermPickerMenuGroup} /> {this.props.group.Name}\n        </div>\n        <div style={styleProps}>\n          {\n            this.state.loaded ? this.props.group.TermSets._Child_Items_.map(termset => {\n              return <TermSet key={termset.Id}\n                termset={termset}\n                termGroup={this.props.group.Id}\n                termstore={this.props.termstore}\n                termsService={this.props.termsService}\n                autoExpand={this._autoExpand}\n                activeNodes={this.props.activeNodes}\n                changedCallback={this.props.changedCallback}\n                multiSelection={this.props.multiSelection}\n                isTermSetSelectable={this.props.isTermSetSelectable}\n                disabledTermIds={this.props.disabledTermIds} />;\n            }) : <Spinner type={SpinnerType.normal} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}