{"version":3,"sources":["propertyFields/termPicker/TermPicker.tsx"],"names":[],"mappings":"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","file":"propertyFields/termPicker/TermPicker.js","sourcesContent":["import * as React from 'react';\nimport { BasePicker, IBasePickerProps, IPickerItemProps } from 'office-ui-fabric-react/lib/Pickers';\nimport { IPickerTerm, IPickerTerms } from './IPropertyFieldTermPicker';\nimport styles from './PropertyFieldTermPickerHost.module.scss';\nimport { IPropertyFieldTermPickerHostProps } from './IPropertyFieldTermPickerHost';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport * as strings from 'PropertyControlStrings';\nimport { ISPTermStorePickerService, TermStorePickerServiceHelper } from '../../services/ISPTermStorePickerService';\n\nexport class TermBasePicker extends BasePicker<IPickerTerm, IBasePickerProps<IPickerTerm>>\n{\n\n}\n\nexport interface ITermPickerState {\n  terms: IPickerTerms;\n}\n\nexport interface ITermPickerProps {\n  termPickerHostProps: IPropertyFieldTermPickerHostProps;\n  context: IWebPartContext;\n  disabled: boolean;\n  value: IPickerTerms;\n  allowMultipleSelections: boolean;\n  isTermSetSelectable: boolean;\n  disabledTermIds: string[];\n  onChanged: (items: IPickerTerm[]) => void;\n  termsService: ISPTermStorePickerService;\n  resolveDelay?: number;\n}\n\nexport default class TermPicker extends React.Component<ITermPickerProps, ITermPickerState> {\n\n  /**\n   * Constructor method\n   */\n  constructor(props: any) {\n    super(props);\n    this.onRenderItem = this.onRenderItem.bind(this);\n    this.onRenderSuggestionsItem = this.onRenderSuggestionsItem.bind(this);\n    this.onFilterChanged = this.onFilterChanged.bind(this);\n    this.onGetTextFromItem = this.onGetTextFromItem.bind(this);\n\n    this.state = {\n      terms: this.props.value\n    };\n\n  }\n\n  /**\n   * componentWillReceiveProps method\n   */\n  public componentWillReceiveProps(nextProps: ITermPickerProps) {\n    // check to see if props is different to avoid re-rendering\n    let newKeys = nextProps.value.map(a => a.key);\n    let currentKeys = this.state.terms.map(a => a.key);\n    newKeys.sort();\n    currentKeys.sort();\n    if (newKeys.join(',') !== currentKeys.join(',')) {\n      this.setState({ terms: nextProps.value });\n    }\n  }\n\n  /**\n   * Renders the item in the picker\n   */\n  protected onRenderItem(term: IPickerItemProps<IPickerTerm>) {\n    return (\n      <div className={styles.pickedTermRoot}\n           key={term.index}\n           data-selection-index={term.index}\n           data-is-focusable={!term.disabled && true}>\n        <span className={styles.pickedTermText}>{term.item.name}</span>\n        {!term.disabled &&\n          <span className={styles.pickedTermCloseIcon}\n            onClick={term.onRemoveItem}>\n            <i className=\"ms-Icon ms-Icon--Cancel\" aria-hidden=\"true\"></i>\n          </span>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Renders the suggestions in the picker\n   */\n  protected onRenderSuggestionsItem(term: IPickerTerm, props) {\n    let termParent = term.termSetName;\n    let termTitle = `${term.name} [${term.termSetName}]`;\n    if (term.path.indexOf(\";\") !== -1) {\n      let splitPath = term.path.split(\";\");\n      termParent = splitPath[splitPath.length - 2];\n      splitPath.pop();\n      termTitle = `${term.name} [${term.termSetName}:${splitPath.join(':')}]`;\n    }\n    return (<div className={styles.termSuggestion} title={termTitle}>\n      <div>{term.name}</div>\n      {\n        // Check if term or term set is fetched\n        term.termSet.indexOf(term.key) !== -1 ? (\n          <div className={styles.termSuggestionSubTitle}>{strings.TermPickerTermSetLabel}</div>\n        ) : (\n          <div className={styles.termSuggestionSubTitle}> {strings.TermPickerInLabel} {termParent}</div>\n        )\n      }\n    </div>);\n  }\n\n  /**\n   * When Filter Changes a new search for suggestions\n   */\n  private async onFilterChanged(filterText: string, tagList: IPickerTerm[]): Promise<IPickerTerm[]> {\n    const { context, termPickerHostProps, allowMultipleSelections, isTermSetSelectable, disabledTermIds } = this.props;\n    // Only allow to select other tags if multi-selection is enabled\n    if (filterText !== \"\" && (allowMultipleSelections || tagList.length === 0)) {\n      let { termsService } = this.props;\n      let terms = await termsService.searchTermsByName(filterText);\n      // Check if the termset can be selected\n      if (isTermSetSelectable) {\n        // Retrieve the current termset\n        const termSets = await termsService.getTermSets();\n        // Check if termset was retrieved and if it contains the filter value\n        if (termSets && termSets.length > 0) {\n          for (const termSet of termSets) {\n            if (termSet.Name.toLowerCase().indexOf(filterText.toLowerCase()) === 0) {\n              // Add the termset to the suggestion list\n              terms.push({\n                key: TermStorePickerServiceHelper.cleanGuid(termSet.Id),\n                name: termSet.Name,\n                path: \"\",\n                termSet: termSet.Id,\n                termGroup: termSet.Group\n              });\n            }\n          }\n        }\n      }\n      // Filter out the terms which are already set\n      const filteredTerms = [];\n      for (const term of terms) {\n        let canBePicked = true;\n        // Check if the term is in the disabled list\n        if (disabledTermIds && disabledTermIds.length > 0) {\n          if (disabledTermIds.indexOf(term.key) !== -1) {\n            canBePicked = false;\n          }\n        }\n        // Check if the term can be used\n        if (canBePicked) {\n          // Only retrieve the terms which are not yet tagged\n          if (tagList.filter(tag => tag.key === term.key).length === 0) {\n            filteredTerms.push(term);\n          }\n        }\n      }\n      return filteredTerms;\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n\n  /**\n   * gets the text from an item\n   */\n  private onGetTextFromItem(item: any): any {\n    return item.name;\n  }\n\n    /**\n   * Render method\n   */\n  public render(): JSX.Element {\n    return (\n      <div>\n        <TermBasePicker\n          disabled={this.props.disabled}\n          onResolveSuggestions={this.onFilterChanged}\n          onRenderSuggestionsItem={this.onRenderSuggestionsItem}\n          getTextFromItem={this.onGetTextFromItem}\n          onRenderItem={this.onRenderItem}\n          defaultSelectedItems={this.props.value}\n          selectedItems={this.state.terms}\n          itemLimit={!this.props.allowMultipleSelections ? 1 : undefined}\n          onChange={this.props.onChanged}\n          resolveDelay={this.props.resolveDelay}\n          className={styles.termBasePicker}\n        />\n      </div>\n    );\n\n  }\n}\n"],"sourceRoot":"../../../src"}