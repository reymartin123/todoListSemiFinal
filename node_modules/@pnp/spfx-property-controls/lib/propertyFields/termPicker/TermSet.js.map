{"version":3,"sources":["propertyFields/termPicker/TermSet.tsx"],"names":[],"mappings":"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","file":"propertyFields/termPicker/TermSet.js","sourcesContent":["import * as React from 'react';\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { ITermSetProps, ITermSetState } from './IPropertyFieldTermPickerHost';\nimport { ITerm, TermStorePickerServiceHelper } from '../../services/ISPTermStorePickerService';\nimport { EXPANDED_IMG, COLLAPSED_IMG, TERMSET_IMG } from './PropertyFieldTermPickerHost';\nimport Term from './Term';\nimport styles from './PropertyFieldTermPickerHost.module.scss';\nimport * as strings from 'PropertyControlStrings';\n\n/**\n * Term set component\n */\nexport default class TermSet extends React.Component<ITermSetProps, ITermSetState> {\n  constructor(props: ITermSetProps) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n      loaded: false,\n      terms: []\n    };\n\n    // Check if the termset has to be automatically opened\n    const selectedTermsInSet = this.props.activeNodes.filter(node => node.termSet === this.props.termset.Id);\n    if (selectedTermsInSet.length > 0) {\n      this._autoLoadTerms();\n    }\n\n    this._handleClick = this._handleClick.bind(this);\n    this._loadTerms = this._loadTerms.bind(this);\n  }\n\n  /**\n   * Autoload the terms of the term set\n   */\n  private _autoLoadTerms() {\n    this.props.autoExpand();\n    this._loadTerms(true);\n  }\n\n  /**\n   * Handle the click event: collapse or expand\n   */\n  private _handleClick() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n\n    if (!this.state.expanded) {\n      this._loadTerms();\n    }\n  }\n\n  /**\n   * Load the terms for the current term set\n   */\n  private async _loadTerms(autoExpand?: boolean) {\n    // Check if there are already terms loaded\n    if (!this.state.loaded) {\n      // Receive all the terms for the current term set\n      const terms: ITerm[] = await this.props.termsService.getAllTerms(this.props.termset);\n      if (terms !== null) {\n        this.setState({\n          terms: terms,\n          loaded: true,\n          expanded: typeof autoExpand !== 'undefined' ? autoExpand : this.state.expanded\n        });\n      } else {\n        this.setState({\n          terms: [],\n          loaded: true\n        });\n      }\n    }\n  }\n\n  /**\n   * The term set selection changed\n   */\n  private termSetSelectionChange = (ev: React.FormEvent<HTMLElement>, isChecked: boolean): void => {\n    const { termset } = this.props;\n    this.props.changedCallback({\n      Id: TermStorePickerServiceHelper.cleanGuid(termset.Id),\n      Name: termset.Name,\n      PathOfTerm: \"\",\n      _ObjectType_: termset._ObjectType_,\n      _ObjectIdentity_: termset._ObjectIdentity_,\n      Description: termset.Description,\n      IsDeprecated: null,\n      IsAvailableForTagging: null,\n      IsRoot: null,\n      TermSet: termset\n    }, this.props.termGroup, isChecked);\n  }\n\n  public render(): JSX.Element {\n    // Specify the inline styling to show or hide the termsets\n    const styleProps: React.CSSProperties = {\n      display: this.state.expanded ? 'block' : 'none'\n    };\n\n    let termElm: JSX.Element = <div />;\n    // Check if the terms have been loaded\n    if (this.state.expanded) {\n      if (this.state.loaded) {\n        if (this.state.terms.length > 0) {\n          termElm = (\n            <div style={styleProps}>\n              {\n                this.state.terms.map(term => {\n                  let disabled = false;\n                  if (this.props.disabledTermIds && this.props.disabledTermIds.length > 0) {\n                    // Check if the current term ID exists in the disabled term IDs array\n                    disabled = this.props.disabledTermIds.indexOf(term.Id) !== -1;\n                  }\n\n                  return <Term key={term.Id}\n                    term={term}\n                    termset={this.props.termset.Id}\n                    termGroup={this.props.termGroup}\n                    activeNodes={this.props.activeNodes}\n                    changedCallback={this.props.changedCallback}\n                    multiSelection={this.props.multiSelection}\n                    disabled={disabled} />;\n                })\n              }\n            </div>\n          );\n        } else {\n          termElm = <div className={`${styles.listItem} ${styles.term}`}>{strings.TermPickerNoTerms}</div>;\n        }\n      } else {\n        termElm = <Spinner type={SpinnerType.normal} />;\n      }\n    }\n\n    return (\n      <div>\n        <div className={`${styles.listItem} ${styles.termset} ${this.props.isTermSetSelectable ? styles.termSetSelectable : \"\"}`} onClick={this._handleClick}>\n          <img src={this.state.expanded ? EXPANDED_IMG : COLLAPSED_IMG} alt={strings.TermPickerExpandTitle} title={strings.TermPickerExpandTitle} />\n\n          {\n            // Show the termset selection box\n            this.props.isTermSetSelectable &&\n            <Checkbox className={styles.termSetSelector}\n              checked={this.props.activeNodes.filter(a => a.path === \"\" && a.termSet.indexOf(a.key) !== -1 && this.props.termset.Id.indexOf(a.key) !== -1).length >= 1}\n              onChange={this.termSetSelectionChange} />\n          }\n\n          <img src={TERMSET_IMG} alt={strings.TermPickerMenuTermSet} title={strings.TermPickerMenuTermSet} /> {this.props.termset.Name}\n        </div>\n        <div style={styleProps}>\n          {termElm}\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}