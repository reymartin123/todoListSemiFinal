{"version":3,"sources":["propertyFields/termPicker/Term.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gEAA+D;AAG/D,qGAA+D;AAG/D;;;GAGG;AACH;IAAkC,wBAAuC;IACvE,cAAY,KAAiB;QAA7B,YACE,kBAAM,KAAK,CAAC,SAUb;QARC,oCAAoC;QACpC,IAAI,MAAM,GAAG,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,KAAK,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAA/B,CAA+B,CAAC,CAAC;QAEpF,KAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;SAC5B,CAAC;QAEF,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACrD,CAAC;IAED;;OAEG;IACK,4BAAa,GAArB,UAAsB,EAAgC,EAAE,SAAkB;QACxE,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,SAAS;SACpB,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC/E,CAAC;IAED;;;;OAIG;IACI,wCAAyB,GAAhC,UAAkC,SAAqB,EAAE,WAAgB;QAAzE,iBAQC;QAPC,uEAAuE;QACvE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YAC/B,IAAI,MAAM,GAAG,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,GAAG,KAAK,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAA/B,CAA+B,CAAC,CAAC;YACnF,IAAI,CAAC,KAAK,GAAG;gBACX,QAAQ,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;aAC5B,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,2BAAY,GAApB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,iDAAM,CAAC,YAAY,CAAC;QAC7B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,iDAAM,CAAC,aAAa,CAAC;QAC9B,CAAC;QAED,MAAM,CAAC,iDAAM,CAAC,WAAW,CAAC;IAC5B,CAAC;IAGM,qBAAM,GAAb;QACE,IAAM,UAAU,GAAwB;YACtC,UAAU,EAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,OAAI;SACpD,CAAC;QAEF,MAAM,CAAC,CACL,6BAAK,SAAS,EAAK,iDAAM,CAAC,QAAQ,SAAI,iDAAM,CAAC,IAAM,EAAE,KAAK,EAAE,UAAU;YACpE,oBAAC,mBAAQ,IACP,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC5B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EACvG,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,EAC9B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAC3B,QAAQ,EAAE,IAAI,CAAC,aAAa,GAAI,CAC9B,CACP,CAAC;IACJ,CAAC;IACH,WAAC;AAAD,CAvEA,AAuEC,CAvEiC,KAAK,CAAC,SAAS,GAuEhD","file":"propertyFields/termPicker/Term.js","sourcesContent":["import * as React from 'react';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { ITermProps, ITermState } from './IPropertyFieldTermPickerHost';\n\nimport styles from './PropertyFieldTermPickerHost.module.scss';\n\n\n/**\n * Term component\n * Renders a selectable term\n */\nexport default class Term extends React.Component<ITermProps, ITermState> {\n  constructor(props: ITermProps) {\n    super(props);\n\n    // Check if current term is selected\n    let active = this.props.activeNodes.filter(item => item.key === this.props.term.Id);\n\n    this.state = {\n      selected: active.length > 0\n    };\n\n    this._handleChange = this._handleChange.bind(this);\n  }\n\n  /**\n   * Handle the checkbox change trigger\n   */\n  private _handleChange(ev: React.FormEvent<HTMLElement>, isChecked: boolean) {\n    this.setState({\n      selected: isChecked\n    });\n    this.props.changedCallback(this.props.term, this.props.termGroup, isChecked);\n  }\n\n  /**\n   * Lifecycle event hook when component retrieves new properties\n   * @param nextProps\n   * @param nextContext\n   */\n  public componentWillReceiveProps?(nextProps: ITermProps, nextContext: any): void {\n    // If multi-selection is turned off, only a single term can be selected\n    if (!this.props.multiSelection) {\n      let active = nextProps.activeNodes.filter(item => item.key === this.props.term.Id);\n      this.state = {\n        selected: active.length > 0\n      };\n    }\n  }\n\n  /**\n   * Get the right class name for the term\n   */\n  private getClassName() {\n    if (this.props.term.IsDeprecated) {\n      return styles.termDisabled;\n    }\n\n    if (!this.props.term.IsAvailableForTagging) {\n      return styles.termNoTagging;\n    }\n\n    return styles.termEnabled;\n  }\n\n\n  public render(): JSX.Element {\n    const styleProps: React.CSSProperties = {\n      marginLeft: `${(this.props.term.PathDepth * 30)}px`\n    };\n\n    return (\n      <div className={`${styles.listItem} ${styles.term}`} style={styleProps}>\n        <Checkbox\n          checked={this.state.selected}\n          disabled={this.props.term.IsDeprecated || !this.props.term.IsAvailableForTagging || this.props.disabled}\n          className={this.getClassName()}\n          label={this.props.term.Name}\n          onChange={this._handleChange} />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}