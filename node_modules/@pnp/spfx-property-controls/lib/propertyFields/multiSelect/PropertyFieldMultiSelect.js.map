{"version":3,"sources":["propertyFields/multiSelect/PropertyFieldMultiSelect.ts"],"names":[],"mappings":";;;;;;;;;;AACA,6BAA+B;AAC/B,oCAAsC;AACtC,8DAIoC;AAEpC,+EAA0E;AAG1E,gEAAwD;AAExD;IAQE,yCAAmB,eAAuB,EAAE,WAAmD;QANxF,SAAI,GAA0B,uCAAqB,CAAC,MAAM,CAAC;QAOhE,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;QAE9B,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAEO,iDAAO,GAAf,UAAgB,IAAiB,EAAE,OAAa,EAAE,cAAkE;QAElH,IAAM,KAAK,GAAmE,IAAI,CAAC,UAAU,CAAC;QAE9F,IAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,sCAA4B,eAC3D,KAAK,IACR,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IACrC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE/B,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,iBAAiB,GAAG,cAAc,CAAC;QAC1C,CAAC;IACH,CAAC;IAEO,kDAAQ,GAAhB,UAAiB,IAAiB;QAChC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAEO,oDAAU,GAAlB,UAAmB,IAAqB;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC3B,4BAA4B;YAC5B,IAAM,kBAAkB,GAAU,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,4BAAS,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;YAE9G,6BAA6B;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,8CAA8C;gBAC9C,IAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjB,kBAAkB,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC;YAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IACH,sCAAC;AAAD,CAvDA,AAuDC,IAAA;AAED,kCAAyC,cAAsB,EAAE,UAA0C;IACzG,MAAM,CAAC,IAAI,+BAA+B,CAAC,cAAc,eACpD,UAAU,IACb,QAAQ,EAAE,IAAI,EACd,SAAS,EAAE,IAAI,IACf,CAAC;AACL,CAAC;AAND,4DAMC","file":"propertyFields/multiSelect/PropertyFieldMultiSelect.js","sourcesContent":["import { IDropdownOption } from 'office-ui-fabric-react/lib/components/Dropdown';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  IPropertyPaneField,\n  PropertyPaneFieldType,\n  IPropertyPaneDropdownOption\n} from '@microsoft/sp-webpart-base';\n\nimport PropertyFieldMultiSelectHost from './PropertyFieldMultiSelectHost';\n\nimport { IPropertyFieldMultiSelectPropsInternal, IPropertyFieldMultiSelectProps } from './IPropertyFieldMultiSelect';\nimport { cloneDeep } from '@microsoft/sp-lodash-subset';\n\nclass PropertyFieldMultiSelectBuilder implements IPropertyPaneField<IPropertyFieldMultiSelectPropsInternal> {\n  public targetProperty: string;\n  public type: PropertyPaneFieldType = PropertyPaneFieldType.Custom;\n  public properties: IPropertyFieldMultiSelectPropsInternal;\n\n\n  private _onChangeCallback: (targetProperty?: string, newValue?: any) => void;\n\n  public constructor(_targetProperty: string, _properties: IPropertyFieldMultiSelectPropsInternal) {\n    this.targetProperty = _targetProperty;\n    this.properties = _properties;\n\n    this.properties.onRender = this._render.bind(this);\n    this.properties.onDispose = this._dispose.bind(this);\n  }\n\n  private _render(elem: HTMLElement, context?: any, changeCallback?: (targetProperty?: string, newValue?: any) => void): void {\n\n    const props: IPropertyFieldMultiSelectProps = <IPropertyFieldMultiSelectProps>this.properties;\n\n    const element = React.createElement(PropertyFieldMultiSelectHost, {\n      ...props,\n      onChanged: this._onChanged.bind(this)\n    });\n\n    ReactDOM.render(element, elem);\n\n    if (changeCallback) {\n      this._onChangeCallback = changeCallback;\n    }\n  }\n\n  private _dispose(elem: HTMLElement) {\n    ReactDOM.unmountComponentAtNode(elem);\n  }\n\n  private _onChanged(item: IDropdownOption): void {\n    if (this._onChangeCallback) {\n      // Get all the selected keys\n      const updateSelectedKeys: any[] = this.properties.selectedKeys ? cloneDeep(this.properties.selectedKeys) : [];\n\n      // Check if item got selected\n      if (item.selected) {\n        updateSelectedKeys.push(item.key);\n      } else {\n        // Remove the item from the selected keys list\n        const itemIdx = updateSelectedKeys.indexOf(item.key);\n        if (itemIdx > -1) {\n          updateSelectedKeys.splice(itemIdx, 1);\n        }\n      }\n\n      this._onChangeCallback(this.targetProperty, updateSelectedKeys);\n    }\n  }\n}\n\nexport function PropertyFieldMultiSelect(targetProperty: string, properties: IPropertyFieldMultiSelectProps): IPropertyPaneField<IPropertyFieldMultiSelectPropsInternal> {\n  return new PropertyFieldMultiSelectBuilder(targetProperty, {\n    ...properties,\n    onRender: null,\n    onDispose: null\n  });\n}\n"],"sourceRoot":"../../../src"}