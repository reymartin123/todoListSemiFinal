{"version":3,"sources":["services/SPSiteSearchService.ts"],"names":[],"mappings":";;AAAA,8CAAwE;AACxE,8DAA0E;AAC1E,yEAAuE;AAKvE;;GAEG;AACH;IAAA;IA0DA,CAAC;IAzDC;;OAEG;IACI,yCAAW,GAAlB,UAAmB,GAAoB,EAAE,KAAa;QACpD,EAAE,CAAC,CAAC,6BAAW,CAAC,IAAI,KAAK,iCAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,mEAAmE;YACnE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;QAAC,IAAI,CAAC,CAAC;YAEN,IAAI,OAAO,GAAW,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC;YACtD,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClD,OAAO,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;YAC/F,CAAC;YAED,0DAA0D;YAC1D,IAAM,cAAc,GAAc,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,wFAAmF,KAAK,eAAU,OAAO,uDAAoD,CAAC;YAE/N,sDAAsD;YACtD,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,cAAoC;gBACpH,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,aAAkB;oBACnD,IAAI,GAAG,GAAyB,EAAE,CAAC;oBACnC,IAAM,MAAM,GAAQ,aAAa,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;oBAChF,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,OAAO;wBACtB,IAAM,IAAI,GAAuB,EAAwB,CAAC;wBAC1D,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;4BACxB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gCACjB,KAAK,OAAO;oCACV,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oCACxB,KAAK,CAAC;gCACR,KAAK,MAAM;oCACT,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;oCACtB,KAAK,CAAC;gCACR,KAAK,QAAQ;oCACX,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;oCACrB,KAAK,CAAC;4BACV,CAAC;wBACH,CAAC,CAAC,CAAC;wBAEH,MAAM,CAAC,IAAI,CAAC;oBACd,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,GAAG,CAAC;gBACb,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,iDAAmB,GAA3B,UAA4B,GAAoB,EAAE,KAAa;QAC7D,MAAM,CAAC,mCAA4B,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;YACrF,IAAM,OAAO,GAAyB;gBACpC,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE,sCAAsC,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE;aAC5G,CAAC;YACF,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC,CAAuC,CAAC;IAC3C,CAAC;IACH,0BAAC;AAAD,CA1DA,AA0DC,IAAA","file":"services/SPSiteSearchService.js","sourcesContent":["import { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport SPPeoplePickerMockHttpClient from './SPPeopleSearchMockService';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { ISPSiteSearchService } from './ISPSiteSearchService';\nimport { IPropertyFieldSite } from '../propertyFields/sitePicker/IPropertyFieldSitePicker';\n\n/**\n * Service implementation to search sites in SharePoint\n */\nexport default class SPSiteSearchService implements ISPSiteSearchService {\n  /**\n   * Search sites from the SharePoint\n   */\n  public searchSites(ctx: IWebPartContext, query: string): Promise<IPropertyFieldSite[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.searchSitesFromMock(ctx, query);\n    } else {\n\n      let rootUrl: string = ctx.pageContext.web.absoluteUrl;\n      if (ctx.pageContext.web.serverRelativeUrl !== \"/\") {\n        rootUrl = ctx.pageContext.web.absoluteUrl.replace(ctx.pageContext.web.serverRelativeUrl, '');\n      }\n\n      // If the running env is SharePoint, loads from the search\n      const userRequestUrl: string = `${ctx.pageContext.web.absoluteUrl}/_api/search/query?querytext='contentclass:STS_Site contentclass:STS_Web Title:*${query}* Path:${rootUrl}*'&selectproperties='SiteId,Title,Path'&rowlimit=5`;\n\n      // Do the call against the SP REST API search endpoint\n      return ctx.spHttpClient.get(userRequestUrl, SPHttpClient.configurations.v1).then((searchResponse: SPHttpClientResponse) => {\n        return searchResponse.json().then((sitesResponse: any) => {\n          let res: IPropertyFieldSite[] = [];\n          const values: any = sitesResponse.PrimaryQueryResult.RelevantResults.Table.Rows;\n          res = values.map(element => {\n            const site: IPropertyFieldSite = {} as IPropertyFieldSite;\n            element.Cells.forEach(cell => {\n              switch (cell.Key) {\n                case 'Title':\n                  site.title = cell.Value;\n                  break;\n                case 'Path':\n                  site.url = cell.Value;\n                  break;\n                case 'SiteId':\n                  site.id = cell.Value;\n                  break;\n              }\n            });\n\n            return site;\n          });\n          return res;\n        });\n      });\n    }\n  }\n\n  /**\n   * Returns fake sites results for the Mock mode\n   */\n  private searchSitesFromMock(ctx: IWebPartContext, query: string): Promise<Array<IPropertyFieldSite>> {\n    return SPPeoplePickerMockHttpClient.searchPeople(ctx.pageContext.web.absoluteUrl).then(() => {\n      const results: IPropertyFieldSite[] = [\n        { title: 'Contoso Site', id: '611453e1-5b5d-45ec-94aa-a180a02df897', url: ctx.pageContext.web.absoluteUrl }\n      ];\n      return results;\n    }) as Promise<Array<IPropertyFieldSite>>;\n  }\n}\n"],"sourceRoot":"../../src"}