{"version":3,"sources":["services/SPViewPickerService.ts"],"names":[],"mappings":"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","file":"services/SPViewPickerService.js","sourcesContent":["import { SPHttpClientResponse } from '@microsoft/sp-http';\nimport { SPHttpClient } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { ISPView, IPropertyFieldViewPickerHostProps, PropertyFieldViewPickerOrderBy } from '../propertyFields/viewPicker';\nimport { ISPViewPickerService } from './ISPViewPickerService';\nimport { ISPViews } from '../propertyFields/viewPicker';\n\n/**\n * Service implementation to get list & list items from current SharePoint site\n */\nexport class SPViewPickerService implements ISPViewPickerService {\n  private context: IWebPartContext;\n  private props: IPropertyFieldViewPickerHostProps;\n\n  /**\n   * Service constructor\n   */\n  constructor(_props: IPropertyFieldViewPickerHostProps, pageContext: IWebPartContext) {\n    this.props = _props;\n    this.context = pageContext;\n  }\n\n  /**\n   * Gets the collection of view for a selected list\n   */\n  public async getViews(): Promise<ISPViews> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.getViewsFromMock();\n    }\n    else {\n      if (this.props.listId === undefined || this.props.listId === \"\") {\n        return this.getEmptyViews();\n      }\n\n      const webAbsoluteUrl = this.props.webAbsoluteUrl ? this.props.webAbsoluteUrl : this.context.pageContext.web.absoluteUrl;\n\n      // If the running environment is SharePoint, request the lists REST service\n      let queryUrl: string = `${webAbsoluteUrl}/_api/lists(guid'${this.props.listId}')/Views?$select=Title,Id`;\n\n      // Check if the orderBy property is provided\n      if (this.props.orderBy !== null) {\n        queryUrl += '&$orderby=';\n        switch (this.props.orderBy) {\n          case PropertyFieldViewPickerOrderBy.Id:\n            queryUrl += 'Id';\n            break;\n          case PropertyFieldViewPickerOrderBy.Title:\n            queryUrl += 'Title';\n            break;\n        }\n\n        // Adds an OData Filter to the list\n        if (this.props.filter){\n          queryUrl += `&$filter=${encodeURIComponent(this.props.filter)}`;\n        }\n\n        let response = await this.context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1);\n\n        let views = (await response.json()) as ISPViews;\n\n        // Check if onViewsRetrieved callback is defined\n        if (this.props.onViewsRetrieved) {\n          //Call onViewsRetrieved\n          let lr = this.props.onViewsRetrieved(views.value);\n          let output: ISPView[];\n\n          //Conditional checking to see of PromiseLike object or array\n          if (lr instanceof Array) {\n            output = lr;\n          } else {\n            output = await lr;\n          }\n\n          views.value = output;\n        }\n\n        return views;\n      }\n    }\n  }\n\n  /**\n   * Returns an empty view for when a list isn't selected\n   */\n  private getEmptyViews(): Promise<ISPViews> {\n    return new Promise<ISPViews>((resolve) => {\n      const listData: ISPViews = {\n        value:[\n        ]\n      };\n\n      resolve(listData);\n    });\n  }\n  /**\n   * Returns 3 fake SharePoint views for the Mock mode\n   */\n  private getViewsFromMock(): Promise<ISPViews> {\n    return new Promise<ISPViews>((resolve) => {\n      const listData: ISPViews = {\n        value:[\n          { Title: 'Mock View One', Id: '3bacd87b-b7df-439a-bb20-4d4d13523431' },\n          { Title: 'Mock View Two', Id: '5e37c820-e2cb-49f7-93f5-14003c07788b' },\n          { Title: 'Mock View Three', Id: '5fda7245-c4a7-403b-adc1-8bd8b481b4ee' }\n        ]\n      };\n\n      resolve(listData);\n    });\n  }\n}\n"],"sourceRoot":"../../src"}