{"version":3,"sources":["services/SPPeopleSearchService.ts"],"names":[],"mappings":"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","file":"services/SPPeopleSearchService.js","sourcesContent":["import { ISPHttpClientOptions, SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { PrincipalType, IPropertyFieldGroupOrPerson } from './../propertyFields/peoplePicker/IPropertyFieldPeoplePicker';\nimport { ISPPeopleSearchService } from './ISPPeopleSearchService';\nimport SPPeoplePickerMockHttpClient from './SPPeopleSearchMockService';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { IUsers } from './IUsers';\n\n/**\n * Service implementation to search people in SharePoint\n */\nexport default class SPPeopleSearchService implements ISPPeopleSearchService {\n  /**\n   * Search people from the SharePoint People database\n   */\n  public searchPeople(ctx: IWebPartContext, query: string, principalType: PrincipalType[], siteUrl: string = null): Promise<IPropertyFieldGroupOrPerson[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.searchPeopleFromMock(ctx, query);\n    } else {\n      // If the running env is SharePoint, loads from the peoplepicker web service\n      const userRequestUrl: string = `${siteUrl ? siteUrl : ctx.pageContext.web.absoluteUrl}/_api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.clientPeoplePickerSearchUser`;\n      const data = {\n        'queryParams': {\n          'AllowEmailAddresses': true,\n          'AllowMultipleEntities': false,\n          'AllUrlZones': false,\n          'MaximumEntitySuggestions': 20,\n          'PrincipalSource': 15,\n          // PrincipalType controls the type of entities that are returned in the results.\n          // Choices are All - 15, Distribution List - 2 , Security Groups - 4, SharePoint Groups - 8, User - 1.\n          // These values can be combined (example: 13 is security + SP groups + users)\n          'PrincipalType': !!principalType && principalType.length > 0 ? principalType.reduce((a, b) => a + b, 0) : 1,\n          'QueryString': query\n        }\n      };\n\n      let httpPostOptions: ISPHttpClientOptions = {\n        headers: {\n          'accept': 'application/json',\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n      // Do the call against the People REST API endpoint\n      return ctx.spHttpClient.post(userRequestUrl, SPHttpClient.configurations.v1, httpPostOptions).then((searchResponse: SPHttpClientResponse) => {\n        return searchResponse.json().then((usersResponse: any) => {\n          let res: IPropertyFieldGroupOrPerson[] = [];\n          let values: any = JSON.parse(usersResponse.value);\n\n          // Filter out \"UNVALIDATED_EMAIL_ADDRESS\"\n          values = values.filter(v => !(v.EntityData && v.EntityData.PrincipalType && v.EntityData.PrincipalType === \"UNVALIDATED_EMAIL_ADDRESS\"));\n          // Filter out NULL keys\n          values = values.filter(v => v.Key !== null);\n          res = values.map(element => {\n            switch (element.EntityType) {\n              case 'User':\n                let email: string = element.EntityData.Email !== null ? element.EntityData.Email : element.Description;\n                const groupOrPerson: IPropertyFieldGroupOrPerson = { fullName: element.DisplayText, login: element.Description };\n                groupOrPerson.id = element.Key;\n                groupOrPerson.email = email;\n                groupOrPerson.jobTitle = element.EntityData.Title;\n                groupOrPerson.initials = this.getFullNameInitials(groupOrPerson.fullName);\n                groupOrPerson.imageUrl = this.getUserPhotoUrl(groupOrPerson.email, siteUrl ? siteUrl : ctx.pageContext.web.absoluteUrl);\n                return groupOrPerson;\n              case 'SecGroup':\n                const group: IPropertyFieldGroupOrPerson = {\n                  fullName: element.DisplayText,\n                  login: element.ProviderName,\n                  id: element.Key,\n                  description: element.Description,\n                };\n                return group;\n              case 'FormsRole':\n                const formsRole: IPropertyFieldGroupOrPerson = {\n                  fullName: element.DisplayText,\n                  login: element.ProviderName,\n                  id: element.Key,\n                  description: element.Description\n                };\n                return formsRole;\n              default:\n                const persona: IPropertyFieldGroupOrPerson = {\n                  fullName: element.DisplayText,\n                  login: element.EntityData.AccountName,\n                  id: element.EntityData.SPGroupID,\n                  description: element.Description\n                };\n                return persona;\n            }\n          });\n          return res;\n        });\n      });\n    }\n  }\n\n  /**\n   * Generates Initials from a full name\n   */\n  private getFullNameInitials(fullName: string): string {\n    if (fullName === null) {\n      return fullName;\n    }\n\n    const words: string[] = fullName.split(' ');\n    if (words.length === 0) {\n      return '';\n    } else if (words.length === 1) {\n      return words[0].charAt(0);\n    } else {\n      return (words[0].charAt(0) + words[1].charAt(0));\n    }\n  }\n\n  /**\n   * Gets the user photo url\n   */\n  private getUserPhotoUrl(userEmail: string, siteUrl: string): string {\n    if (userEmail) {\n      return `${siteUrl}/_layouts/15/userphoto.aspx?size=S&accountname=${encodeURIComponent(userEmail)}`;\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns fake people results for the Mock mode\n   */\n  private searchPeopleFromMock(ctx: IWebPartContext, query: string): Promise<Array<IPropertyFieldGroupOrPerson>> {\n    return SPPeoplePickerMockHttpClient.searchPeople(ctx.pageContext.web.absoluteUrl).then(() => {\n      const results: IPropertyFieldGroupOrPerson[] = [\n        { fullName: 'Katie Jordan', initials: 'KJ', jobTitle: 'VIP Marketing', email: 'katiej@contoso.com', login: 'katiej@contoso.com' },\n        { fullName: 'Gareth Fort', initials: 'GF', jobTitle: 'Sales Lead', email: 'garethf@contoso.com', login: 'garethf@contoso.com' },\n        { fullName: 'Sara Davis', initials: 'SD', jobTitle: 'Assistant', email: 'sarad@contoso.com', login: 'sarad@contoso.com' },\n        { fullName: 'John Doe', initials: 'JD', jobTitle: 'Developer', email: 'johnd@contoso.com', login: 'johnd@contoso.com' }\n      ];\n      return results;\n    }) as Promise<Array<IPropertyFieldGroupOrPerson>>;\n  }\n}\n"],"sourceRoot":"../../src"}