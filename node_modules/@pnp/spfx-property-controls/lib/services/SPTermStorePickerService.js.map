{"version":3,"sources":["services/SPTermStorePickerService.ts"],"names":[],"mappings":"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","file":"services/SPTermStorePickerService.js","sourcesContent":["/**\n * DISCLAIMER\n *\n * As there is not yet an OData end-point for managed metadata, this service makes use of the ProcessQuery end-points.\n * The service will get updated once the APIs are in place for managing managed metadata.\n */\n\nimport { SPHttpClient, SPHttpClientResponse, ISPHttpClientOptions } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { IPickerTerm } from './../propertyFields/termPicker/IPropertyFieldTermPicker';\nimport { ITermStore, ITerms, ITerm, IGroup, ITermSet, ISPTermStorePickerServiceProps, ISPTermStorePickerService, TermStorePickerServiceHelper, ITermSets } from './ISPTermStorePickerService';\nimport SPTermStoreMockHttpClient from './SPTermStorePickerMockService';\n\n/**\n * Service implementation to manage term stores in SharePoint\n */\nexport default class SPTermStorePickerService implements ISPTermStorePickerService {\n  private clientServiceUrl: string;\n\n  /**\n   * Service constructor\n   */\n  constructor(private props: ISPTermStorePickerServiceProps, private context: IWebPartContext) {\n    this.clientServiceUrl = this.context.pageContext.web.absoluteUrl + '/_vti_bin/client.svc/ProcessQuery';\n  }\n\n  /**\n   * Gets the collection of term stores in the current SharePoint env\n   */\n  public getTermStores(): Promise<ITermStore[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.getTermStoresFromMock();\n    } else {\n      // Retrieve the term store name, groups, and term sets\n      const data = '<Request AddExpandoFieldTypeSuffix=\"true\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\".NET Library\" xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\"><Actions><ObjectPath Id=\"2\" ObjectPathId=\"1\" /><ObjectIdentityQuery Id=\"3\" ObjectPathId=\"1\" /><ObjectPath Id=\"5\" ObjectPathId=\"4\" /><ObjectIdentityQuery Id=\"6\" ObjectPathId=\"4\" /><Query Id=\"7\" ObjectPathId=\"4\"><Query SelectAllProperties=\"false\"><Properties><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Groups\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"IsSystemGroup\" ScalarProperty=\"true\" /><Property Name=\"TermSets\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"Description\" ScalarProperty=\"true\" /><Property Name=\"Names\" ScalarProperty=\"true\" /></Properties></ChildItemQuery></Property></Properties></ChildItemQuery></Property></Properties></Query></Query></Actions><ObjectPaths><StaticMethod Id=\"1\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"4\" ParentId=\"1\" Name=\"GetDefaultSiteCollectionTermStore\" /></ObjectPaths></Request>';\n\n      const reqHeaders = new Headers();\n      reqHeaders.append(\"accept\", \"application/json\");\n      reqHeaders.append(\"content-type\", \"application/xml\");\n\n      const httpPostOptions: ISPHttpClientOptions = {\n        headers: reqHeaders,\n        body: data\n      };\n\n      return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n        return serviceResponse.json().then((serviceJSONResponse: any) => {\n          // Construct results\n          let termStoreResult: ITermStore[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermStore');\n          // Check if term store was retrieved\n          if (termStoreResult.length > 0) {\n            // Check if the termstore needs to be filtered or limited\n            if (this.props.limitByGroupNameOrID || this.props.limitByTermsetNameOrID || this.props.excludeSystemGroup) {\n              return termStoreResult.map(termstore => {\n                let termGroups = termstore.Groups._Child_Items_;\n                // Check if the groups have to be limited to a specific group name or ID\n                if (this.props.limitByGroupNameOrID) {\n                  const groupNameOrId = this.props.limitByGroupNameOrID;\n                  termGroups = termGroups.filter((group: IGroup) => group.Name === groupNameOrId || group.Id.toLowerCase() === groupNameOrId.toLowerCase());\n                }\n\n                // Check if the groups have to be limited to a specific term set\n                if (this.props.limitByTermsetNameOrID) {\n                  const termsetNameOrId = this.props.limitByTermsetNameOrID;\n                  termGroups = termGroups.map((group: IGroup) => {\n                    group.TermSets._Child_Items_ = group.TermSets._Child_Items_.filter((termSet: ITermSet) => termSet.Name === termsetNameOrId || TermStorePickerServiceHelper.cleanGuid(termSet.Id).toLowerCase() === TermStorePickerServiceHelper.cleanGuid(termsetNameOrId).toLowerCase());\n                    return group;\n                  });\n                }\n\n                // Filter out all systen groups\n                if (this.props.excludeSystemGroup) {\n                  termGroups = termGroups.filter(group => !group.IsSystemGroup);\n                }\n\n                // Filter out empty groups\n                termGroups = termGroups.filter((group: IGroup) => group.TermSets._Child_Items_.length > 0);\n\n                // Map the new groups\n                termstore.Groups._Child_Items_ = termGroups;\n                return termstore;\n              });\n            }\n\n            // Return the term store results\n            return termStoreResult;\n          }\n          return [];\n        });\n      });\n    }\n  }\n\n  /**\n   * Gets the current term set\n   */\n  public async getTermSets(): Promise<ITermSet[]> {\n    const termStore = await this.getTermStores();\n    return this.getAllTermSets(termStore, this.props.limitByTermsetNameOrID);\n  }\n\n  /**\n   * Get the term set ID by its name\n   * @param termstore\n   * @param termset\n   */\n  private getAllTermSets(termstore: ITermStore[], termsetNameOrId: string): ITermSet[] {\n    if (termstore && termstore.length > 0) {\n      // Get the first term store\n      const ts = termstore[0];\n      let termSets: ITermSet[] = [];\n      // Check if the term store contains groups\n      if (ts.Groups && ts.Groups._Child_Items_) {\n        for (const group of ts.Groups._Child_Items_) {\n          // Check if the group contains term sets\n          if (group.TermSets && group.TermSets._Child_Items_) {\n            if (termsetNameOrId) {\n              for (const termSet of group.TermSets._Child_Items_) {\n                // Check if the term set is found\n                if (termSet.Name === termsetNameOrId || termSet.Id.indexOf(termsetNameOrId) !== -1) {\n                  termSets = [...termSets, termSet];\n                }\n              }\n            } else {\n              termSets = [...termSets, ...group.TermSets._Child_Items_];\n            }\n          }\n        }\n      }\n      return termSets;\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieve all terms for the given term set\n   * @param termsetId\n   */\n  public async getAllTerms(termSet: ITermSet): Promise<ITerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.getAllMockTerms();\n    } else {\n      // Request body to retrieve all terms for the given term set\n      const data = `<Request AddExpandoFieldTypeSuffix=\"true\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\".NET Library\" xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\"><Actions><ObjectPath Id=\"30\" ObjectPathId=\"29\" /><Query Id=\"31\" ObjectPathId=\"29\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"Description\" ScalarProperty=\"true\" /><Property Name=\"IsDeprecated\" ScalarProperty=\"true\" /><Property Name=\"IsAvailableForTagging\" ScalarProperty=\"true\" /><Property Name=\"IsRoot\" ScalarProperty=\"true\" /><Property Name=\"PathOfTerm\" ScalarProperty=\"true\" /><Property Name=\"TermSet\" SelectAll=\"true\" /><Property Name=\"Parent\" SelectAll=\"true\"><Query SelectAllProperties=\"false\"><Properties /></Query></Property><Property Name=\"TermSet\"><Query SelectAllProperties=\"false\"><Properties><Property Name=\"Id\" ScalarProperty=\"true\" /></Properties></Query></Property></Properties></ChildItemQuery></Query></Actions><ObjectPaths><Method Id=\"29\" ParentId=\"18\" Name=\"GetAllTerms\" /><Identity Id=\"18\" Name=\"${termSet._ObjectIdentity_}\"\n      /></ObjectPaths></Request>`;\n\n      const reqHeaders = new Headers();\n      reqHeaders.append(\"accept\", \"application/json\");\n      reqHeaders.append(\"content-type\", \"application/xml\");\n\n      const httpPostOptions: ISPHttpClientOptions = {\n        headers: reqHeaders,\n        body: data\n      };\n\n      return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n        return serviceResponse.json().then((serviceJSONResponse: any) => {\n          // Retrieve the term collection results\n          const termStoreResult: ITerms[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermCollection');\n          if (termStoreResult.length > 0) {\n            // Retrieve all terms\n            let terms = termStoreResult[0]._Child_Items_;\n            // Clean the term ID and specify the path depth\n            terms = terms.map(term => {\n              term.Id = TermStorePickerServiceHelper.cleanGuid(term.Id);\n              term['PathDepth'] = term.PathOfTerm.split(';').length;\n              return term;\n            });\n            // Check if the term set was not empty\n            if (terms.length > 0) {\n              // Sort the terms by PathOfTerm and their depth\n              return TermStorePickerServiceHelper.sortTerms(terms);\n            }\n          }\n          return null;\n        });\n      });\n    }\n  }\n\n  /**\n   * Retrieve all terms that starts with the searchText\n   * @param searchText\n   */\n  public searchTermsByName(searchText: string): Promise<IPickerTerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return SPTermStoreMockHttpClient.searchTermsByName(searchText);\n    } else {\n      if (this.props.limitByTermsetNameOrID) {\n        return this.searchTermsByTermSet(searchText, this.props.limitByTermsetNameOrID);\n      } else if (this.props.limitByGroupNameOrID) {\n        return this.searchTermsByGroup(searchText);\n      } else {\n        return this.searchAllTerms(searchText);\n      }\n    }\n  }\n\n  public async getGroupTermSets(group: IGroup): Promise<ITermSets> {\n    return group.TermSets;\n  }\n\n  /**\n     * Searches terms for the given term set\n     * @param searchText\n     * @param termsetId\n     */\n  private searchTermsByTermSet(searchText: string, termSet: string): Promise<IPickerTerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return SPTermStoreMockHttpClient.searchTermsByName(searchText);\n    } else {\n      return new Promise<IPickerTerm[]>(resolve => {\n        this.getTermStores().then(termStore => {\n          let TermSetId = termSet;\n          if (!TermStorePickerServiceHelper.isGuid(termSet)) {\n            TermSetId = TermStorePickerServiceHelper.cleanGuid(termStore[0].Groups._Child_Items_[0].TermSets._Child_Items_[0].Id);\n          }\n\n          const group: IGroup = this.getTermGroupByTermSetId(TermSetId, termStore);\n\n          let data = `<Request xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\"Javascript Library\"><Actions><ObjectPath Id=\"456\" ObjectPathId=\"455\" /><ObjectIdentityQuery Id=\"457\" ObjectPathId=\"455\" /><ObjectPath Id=\"459\" ObjectPathId=\"458\" /><ObjectIdentityQuery Id=\"460\" ObjectPathId=\"458\" /><ObjectPath Id=\"462\" ObjectPathId=\"461\" /><ObjectIdentityQuery Id=\"463\" ObjectPathId=\"461\" /><ObjectPath Id=\"465\" ObjectPathId=\"464\" /><SetProperty Id=\"466\" ObjectPathId=\"464\" Name=\"TermLabel\"><Parameter Type=\"String\">${searchText}</Parameter></SetProperty><SetProperty Id=\"467\" ObjectPathId=\"464\" Name=\"DefaultLabelOnly\"><Parameter Type=\"Boolean\">true</Parameter></SetProperty><SetProperty Id=\"468\" ObjectPathId=\"464\" Name=\"StringMatchOption\"><Parameter Type=\"Number\">0</Parameter></SetProperty><SetProperty Id=\"469\" ObjectPathId=\"464\" Name=\"ResultCollectionSize\"><Parameter Type=\"Number\">10</Parameter></SetProperty><SetProperty Id=\"470\" ObjectPathId=\"464\" Name=\"TrimUnavailable\"><Parameter Type=\"Boolean\">true</Parameter></SetProperty><ObjectPath Id=\"472\" ObjectPathId=\"471\" /><Query Id=\"473\" ObjectPathId=\"471\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"IsRoot\" SelectAll=\"true\" /><Property Name=\"Id\" SelectAll=\"true\" /><Property Name=\"Name\" SelectAll=\"true\" /><Property Name=\"PathOfTerm\" SelectAll=\"true\" /><Property Name=\"TermSet\" SelectAll=\"true\" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id=\"455\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"458\" ParentId=\"455\" Name=\"GetDefaultKeywordsTermStore\" /><Method Id=\"461\" ParentId=\"458\" Name=\"GetTermSet\"><Parameters><Parameter Type=\"Guid\">${TermSetId}</Parameter></Parameters></Method><Constructor Id=\"464\" TypeId=\"{61a1d689-2744-4ea3-a88b-c95bee9803aa}\" /><Method Id=\"471\" ParentId=\"461\" Name=\"GetTerms\"><Parameters><Parameter ObjectPathId=\"464\" /></Parameters></Method></ObjectPaths></Request>`;\n\n          const reqHeaders = new Headers();\n          reqHeaders.append(\"accept\", \"application/json\");\n          reqHeaders.append(\"content-type\", \"application/xml\");\n\n          const httpPostOptions: ISPHttpClientOptions = {\n            headers: reqHeaders,\n            body: data\n          };\n\n\n          return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n            return serviceResponse.json().then((serviceJSONResponse: any) => {\n              // Retrieve the term collection results\n              const termStoreResult: ITerms[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermCollection');\n              if (termStoreResult.length > 0) {\n                // Retrieve all terms\n                let terms = termStoreResult[0]._Child_Items_;\n\n                let returnTerms: IPickerTerm[] = [];\n                terms.forEach(term => {\n                  if (term.Name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n                    returnTerms.push({\n                      key: TermStorePickerServiceHelper.cleanGuid(term.Id),\n                      name: term.Name,\n                      path: term.PathOfTerm,\n                      termSet: term.TermSet.Id,\n                      termSetName: term.TermSet.Name,\n                      termGroup: group ? TermStorePickerServiceHelper.cleanGuid(group.Id) : ''\n                    });\n                  }\n                });\n                resolve(returnTerms);\n              }\n              return null;\n            });\n          });\n        });\n      });\n    }\n  }\n\n  /**\n   * Searches terms for a group\n   * @param searchText\n   */\n  private searchTermsByGroup(searchText: string): Promise<IPickerTerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return SPTermStoreMockHttpClient.searchTermsByName(searchText);\n    } else {\n      return new Promise<IPickerTerm[]>(resolve => {\n        this.getTermStores().then(termStore => {\n          let termSetTerms: Array<Promise<ITerm[]>> = [];\n          termStore[0].Groups._Child_Items_[0].TermSets._Child_Items_.forEach(ts => {\n            termSetTerms.push(this.getAllTerms(ts));\n          });\n\n          Promise.all(termSetTerms).then(results => {\n            let returnTerms: IPickerTerm[] = [];\n            results.forEach(terms => {\n              if (terms) {\n                terms.forEach(term => {\n                  if (term.Name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n                    returnTerms.push({\n                      key: TermStorePickerServiceHelper.cleanGuid(term.Id),\n                      name: term.Name,\n                      path: term.PathOfTerm,\n                      termSet: term.TermSet.Id,\n                      termSetName: term.TermSet.Name,\n                      termGroup: TermStorePickerServiceHelper.cleanGuid(termStore[0].Groups._Child_Items_[0].Id) // ??? I don't know why we always work with the 1st group\n                    });\n                  }\n                });\n              }\n            });\n            resolve(returnTerms);\n          });\n\n        });\n      });\n    }\n\n  }\n\n  /**\n   * Searches terms in termstore\n   * @param searchText\n   */\n  private searchAllTerms(searchText: string): Promise<IPickerTerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return SPTermStoreMockHttpClient.searchTermsByName(searchText);\n    } else {\n      return new Promise<IPickerTerm[]>(resolve => {\n\n        let data = `<Request xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\"Javascript Library\"><Actions><ObjectPath Id=\"775\" ObjectPathId=\"774\" /><ObjectIdentityQuery Id=\"776\" ObjectPathId=\"774\" /><ObjectPath Id=\"778\" ObjectPathId=\"777\" /><ObjectIdentityQuery Id=\"779\" ObjectPathId=\"777\" /><ObjectPath Id=\"781\" ObjectPathId=\"780\" /><SetProperty Id=\"782\" ObjectPathId=\"780\" Name=\"TermLabel\"><Parameter Type=\"String\">${searchText}</Parameter></SetProperty><SetProperty Id=\"783\" ObjectPathId=\"780\" Name=\"DefaultLabelOnly\"><Parameter Type=\"Boolean\">true</Parameter></SetProperty><SetProperty Id=\"784\" ObjectPathId=\"780\" Name=\"StringMatchOption\"><Parameter Type=\"Number\">0</Parameter></SetProperty><SetProperty Id=\"785\" ObjectPathId=\"780\" Name=\"ResultCollectionSize\"><Parameter Type=\"Number\">10</Parameter></SetProperty><SetProperty Id=\"786\" ObjectPathId=\"780\" Name=\"TrimUnavailable\"><Parameter Type=\"Boolean\">true</Parameter></SetProperty><ObjectPath Id=\"788\" ObjectPathId=\"787\" /><Query Id=\"789\" ObjectPathId=\"787\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"IsRoot\" SelectAll=\"true\" /><Property Name=\"Id\" SelectAll=\"true\" /><Property Name=\"Name\" SelectAll=\"true\" /><Property Name=\"PathOfTerm\" SelectAll=\"true\" /><Property Name=\"TermSet\" SelectAll=\"true\" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id=\"774\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"777\" ParentId=\"774\" Name=\"GetDefaultKeywordsTermStore\" /><Constructor Id=\"780\" TypeId=\"{61a1d689-2744-4ea3-a88b-c95bee9803aa}\" /><Method Id=\"787\" ParentId=\"777\" Name=\"GetTerms\"><Parameters><Parameter ObjectPathId=\"780\" /></Parameters></Method></ObjectPaths></Request>`;\n        const reqHeaders = new Headers();\n        reqHeaders.append(\"accept\", \"application/json\");\n        reqHeaders.append(\"content-type\", \"application/xml\");\n\n        const httpPostOptions: ISPHttpClientOptions = {\n          headers: reqHeaders,\n          body: data\n        };\n\n        return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n          return serviceResponse.json().then((serviceJSONResponse: any) => {\n            // Retrieve the term collection results\n            const termStoreResult: ITerms[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermCollection');\n            if (termStoreResult.length > 0) {\n              // Retrieve all terms\n              let terms = termStoreResult[0]._Child_Items_;\n\n              let returnTerms: IPickerTerm[] = [];\n              terms.forEach(term => {\n                if (term.Name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n                  returnTerms.push({\n                    key: TermStorePickerServiceHelper.cleanGuid(term.Id),\n                    name: term.Name,\n                    path: term.PathOfTerm,\n                    termSet: term.TermSet.Id,\n                    termSetName: term.TermSet.Name,\n                    termGroup: '' // didn't find a way to simply get Group in that situation. It won't affect functionality. Only switch between TermStorePicker and EnterpriseTermStorePicker\n                  });\n                }\n              });\n              resolve(returnTerms);\n            }\n            return null;\n          });\n        });\n      });\n    }\n  }\n\n  /**\n   * Returns 3 fake SharePoint lists for the Mock mode\n   */\n  private getTermStoresFromMock(): Promise<ITermStore[]> {\n    return SPTermStoreMockHttpClient.getTermStores(this.context.pageContext.web.absoluteUrl).then((data) => {\n      return data;\n    }) as Promise<ITermStore[]>;\n  }\n\n  /**\n   * Returns 3 fake SharePoint lists for the Mock mode\n   */\n  private getAllMockTerms(): Promise<ITerm[]> {\n    return SPTermStoreMockHttpClient.getAllTerms().then((data) => {\n      return data;\n    }) as Promise<ITerm[]>;\n  }\n\n  private getTermGroupByTermSetId(termSetId: string, termStores: ITermStore[]): IGroup {\n    for (let i = 0, len = termStores.length; i < len; i++) {\n      const termStore = termStores[i];\n\n      for (let groupIdx = 0, groupsLen = termStore.Groups._Child_Items_.length; groupIdx < groupsLen; groupIdx++) {\n        const group = termStore.Groups._Child_Items_[groupIdx];\n\n        if (group.TermSets._Child_Items_.filter(ts => TermStorePickerServiceHelper.cleanGuid(ts.Id) === termSetId).length) {\n          return group;\n        }\n      }\n    }\n\n    return null;\n  }\n}\n"],"sourceRoot":"../../src"}